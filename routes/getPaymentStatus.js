// ========================================
// routes/getPaymentStatus.js
// ========================================
module.exports = (dependencies) => {
    const { readOrders } = dependencies;

    return (req, res) => {
        try {
            console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –ø–ª–∞—Ç–µ–∂—É:', new Date().toISOString());
            const { order_id } = req.query;
            
            if (!order_id) {
                console.warn('‚ö†Ô∏è Order ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ');
                return res.status(400).json({ error: 'Order ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ' });
            }

            console.log('üÜî –®—É–∫–∞—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', order_id);
            const allOrders = readOrders();
            const order = allOrders.orders[order_id];

            if (!order) {
                console.error('‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ:', order_id);
                return res.status(404).json({ error: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
            }

            const response = {
                status: order.status === 'paid' ? 'accept' : order.status || 'pending',
                orderId: order_id,
                courseName: order.courseName,
                timestamp: new Date().toISOString()
            };

            console.log('üìä –°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', response);
            res.json(response);

        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É:', error);
            res.status(500).json({ error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
        }
    };
};