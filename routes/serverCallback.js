// ========================================
// routes/serverCallback.js
// ========================================
const crypto = require('crypto');

module.exports = (dependencies) => {
    const {
        MERCHANT_SECRET_KEY,
        readOrders,
        writeOrders,
        sendPaymentConfirmationEmail,
        sendAdminNotification,
        metrics
    } = dependencies;

    return async (req, res) => {
        let paymentData;
        let orderReference = 'unknown';
        
        try {
            console.log('üìû Callback –æ—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥ WayForPay');
            console.log('üìÖ –ß–∞—Å:', new Date().toISOString());
            
            // –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –æ–±—Ä–æ–±–∫–∞ —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤ –¥–∞–Ω–∏—Ö
            if (Object.keys(req.body).length === 1 && typeof Object.keys(req.body)[0] === 'string') {
                const bodyKey = Object.keys(req.body)[0];
                console.log('üîç –°–ø—Ä–æ–±–∞ –ø–∞—Ä—Å–∏—Ç–∏ JSON –∑ –∫–ª—é—á–∞ body');
                
                try {
                    paymentData = JSON.parse(bodyKey);
                    console.log('‚úÖ JSON —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–ø–∞—Ä—Å–µ–Ω–æ –∑ –∫–ª—é—á–∞');
                } catch (parseError) {
                    console.log('‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ JSON –Ω–µ –≤–¥–∞–≤—Å—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ raw body');
                    paymentData = req.body;
                }
            } else {
                paymentData = req.body;
            }
            
            console.log('üîç –û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ:', JSON.stringify(paymentData, null, 2));
            
            // –ë–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è orderReference
            if (paymentData && paymentData.orderReference) {
                orderReference = paymentData.orderReference;
            }
            
            const { 
                merchantAccount,
                transactionStatus, 
                processingDate,
                amount,
                merchantSignature 
            } = paymentData || {};

            // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
            if (!orderReference || !transactionStatus || !processingDate || !merchantSignature) {
                console.warn('‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–æ–ª—è –≤ callback-–∑–∞–ø–∏—Ç—ñ.');
                console.warn('   orderReference:', orderReference);
                console.warn('   transactionStatus:', transactionStatus);
                console.warn('   processingDate:', processingDate);
                console.warn('   merchantSignature:', merchantSignature ? 'present' : 'missing');
                
                return res.status(400).json({ 
                    error: 'Missing required fields',
                    orderReference: orderReference,
                    status: 'accept',
                    time: Math.floor(Date.now() / 1000)
                });
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å—É (–¥–µ–∫—ñ–ª—å–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤)
            const signatureVariants = [
                [merchantAccount || process.env.MERCHANT_ACCOUNT, orderReference, transactionStatus, processingDate].join(';'),
                [orderReference, transactionStatus, processingDate].join(';'),
                [merchantAccount || process.env.MERCHANT_ACCOUNT, orderReference, amount, transactionStatus, processingDate].join(';')
            ];

            let signatureValid = false;
            signatureVariants.forEach((variant, index) => {
                const expectedSig = crypto.createHmac('md5', MERCHANT_SECRET_KEY).update(variant).digest('hex');
                console.log(`   –í–∞—Ä—ñ–∞–Ω—Ç ${index + 1}:`, variant, '‚Üí', expectedSig);
                if (expectedSig === merchantSignature) {
                    signatureValid = true;
                }
            });
            
            console.log('   –û—Ç—Ä–∏–º–∞–Ω–∏–π –ø—ñ–¥–ø–∏—Å:', merchantSignature);
            console.log('   –ü—ñ–¥–ø–∏—Å–∏ –∑–±—ñ–≥–∞—é—Ç—å—Å—è:', signatureValid);

            if (!signatureValid) {
                console.warn('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø—ñ–¥–ø–∏—Å –¥–ª—è –≤—Å—ñ—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤. –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –æ–±—Ä–æ–±–∫—É...');
            }

            // –û–±—Ä–æ–±–ª—è—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            const allOrders = readOrders();
            const customerOrder = allOrders.orders[orderReference];

            if (customerOrder && customerOrder.status !== 'paid') {
                if (transactionStatus === 'Approved') {
                    console.log('‚úÖ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.');
                    customerOrder.status = 'paid';
                    customerOrder.paidAt = new Date().toISOString();
                    customerOrder.wayforpayData = paymentData;
                    writeOrders(allOrders);

                    await sendPaymentConfirmationEmail(
                        customerOrder.email, 
                        customerOrder.name, 
                        customerOrder.courseName, 
                        orderReference
                    );
                    
                    await sendAdminNotification(
                        customerOrder.email, 
                        customerOrder.name, 
                        customerOrder.courseName, 
                        orderReference, 
                        customerOrder.price
                    );
                    
                    metrics.successfulPayments++;
                    console.log('‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ');
                } else {
                    console.log('‚ö†Ô∏è –°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –Ω–µ Approved:', transactionStatus);
                    metrics.failedPayments++;
                }
            } else if (customerOrder && customerOrder.status === 'paid') {
                console.log('üîÅ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –±—É–ª–æ –æ–ø–ª–∞—á–µ–Ω–æ.');
            } else {
                console.error('‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ:', orderReference);
            }

        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ callback:', error);
            console.error('‚ùå Stack trace:', error.stack);
            metrics.failedPayments++;
        } finally {
            // –í—ñ–¥–ø–æ–≤—ñ–¥—å WayForPay
            const responseTime = (paymentData && paymentData.processingDate) || Math.floor(Date.now() / 1000);
            const responseStr = [orderReference, 'accept', responseTime].join(';');
            const signature = crypto.createHmac('md5', MERCHANT_SECRET_KEY).update(responseStr).digest('hex');
            
            const response = { 
                orderReference: orderReference, 
                status: 'accept', 
                time: responseTime, 
                signature: signature 
            };
            
            console.log('üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å WayForPay:', response);
            res.json(response);
        }
    };
};