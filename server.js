const express = require('express');
const multer = require('multer');
const crypto = require('crypto');
const path = require('path');
const nodemailer = require('nodemailer');
const rateLimit = require('express-rate-limit');
const fs = require('fs');
require('dotenv').config();

const app = express();
app.use(express.json());
console.log('üîë SECRET_KEY:', process.env.MERCHANT_SECRET_KEY);
app.use(express.urlencoded({ extended: true }));
app.set('trust proxy', 1);
const PORT = process.env.PORT || 3000;
const upload = multer();

// --- –†–æ–±–æ—Ç–∞ –∑ —Ñ–∞–π–ª–æ–º –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å ---
const ORDERS_FILE_PATH = path.join(__dirname, 'orders.json');

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Ñ–∞–π–ª—É
function readOrders() {
    try {
        if (!fs.existsSync(ORDERS_FILE_PATH)) {
            // –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ –∑ –ø–æ—á–∞—Ç–∫–æ–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é
            fs.writeFileSync(ORDERS_FILE_PATH, JSON.stringify({ orders: {} }, null, 2));
        }
        const fileContent = fs.readFileSync(ORDERS_FILE_PATH, 'utf-8');
        return JSON.parse(fileContent);
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É –∑–∞–º–æ–≤–ª–µ–Ω—å:', error);
        return { orders: {} }; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—É—Å—Ç—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø–∏—Å—É –¥–∞–Ω–∏—Ö —É —Ñ–∞–π–ª
function writeOrders(data) {
    try {
        fs.writeFileSync(ORDERS_FILE_PATH, JSON.stringify(data, null, 2), 'utf-8');
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É —É —Ñ–∞–π–ª –∑–∞–º–æ–≤–ª–µ–Ω—å:', error);
    }
}
// --- –ö—ñ–Ω–µ—Ü—å –±–ª–æ–∫—É —Ä–æ–±–æ—Ç–∏ –∑ —Ñ–∞–π–ª–æ–º ---

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
const requiredEnvVars = {
    MERCHANT_ACCOUNT: process.env.MERCHANT_ACCOUNT,
    MERCHANT_SECRET_KEY: process.env.MERCHANT_SECRET_KEY,
    MERCHANT_DOMAIN_NAME: process.env.MERCHANT_DOMAIN_NAME,
    EMAIL_HOST: process.env.EMAIL_HOST,
    EMAIL_USER: process.env.EMAIL_USER,
    EMAIL_PASS: process.env.EMAIL_PASS
};

const missingVars = Object.entries(requiredEnvVars)
    .filter(([key, value]) => !value)
    .map(([key]) => key);

if (missingVars.length > 0) {
    console.error('‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è:', missingVars.join(', '));
    console.error('üìù –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª .env');
    process.exit(1);
}

const MERCHANT_ACCOUNT = process.env.MERCHANT_ACCOUNT;
const MERCHANT_SECRET_KEY = process.env.MERCHANT_SECRET_KEY;
const MERCHANT_DOMAIN_NAME = process.env.MERCHANT_DOMAIN_NAME;

// Email configuration
const EMAIL_HOST = process.env.EMAIL_HOST;
const EMAIL_PORT = process.env.EMAIL_PORT || 587;
const EMAIL_USER = process.env.EMAIL_USER;
const EMAIL_PASS = process.env.EMAIL_PASS;
const EMAIL_FROM = process.env.EMAIL_FROM || process.env.EMAIL_USER;

// –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
const metrics = {
    totalOrders: 0,
    successfulPayments: 0,
    failedPayments: 0,
    emailsSent: 0,
    emailsFailed: 0,
    startTime: Date.now()
};

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –¥–ª—è email
const transporter = nodemailer.createTransport({
    host: EMAIL_HOST,
    port: EMAIL_PORT,
    secure: EMAIL_PORT === 465,
    auth: {
        user: EMAIL_USER,
        pass: EMAIL_PASS
    },
    pool: true,
    maxConnections: 5,
    maxMessages: 100
});

transporter.verify((error, success) => {
    if (error) {
        console.error('‚ùå Email –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ:', error.message);
    } else {
        console.log('‚úÖ Email —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏');
    }
});

// Rate limiting
const paymentLimiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 —Ö–≤–∏–ª–∏–Ω
    max: 10, // –º–∞–∫—Å–∏–º—É–º 10 —Å–ø—Ä–æ–± –Ω–∞ IP
    message: '–ó–∞–±–∞–≥–∞—Ç–æ —Å–ø—Ä–æ–± –æ–ø–ª–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 15 —Ö–≤–∏–ª–∏–Ω.',
    standardHeaders: true,
    legacyHeaders: false
});

// –§—É–Ω–∫—Ü—ñ—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó email
function isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email –∫–ª—ñ—î–Ω—Ç—É
async function sendPaymentConfirmationEmail(email, name, courseName, orderId) {
    try {
        const telegramBotUrl = process.env.TELEGRAM_BOT_URL || 'https://t.me/Tinas_cursuribot';
        
        const mailOptions = {
            from: EMAIL_FROM,
            to: email,
            subject: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ –∫—É—Ä—Å—É - TinaSchool',
            html: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9f9f9;">
                    <div style="background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
                        <h2 style="color: #2c3e50; text-align: center; margin-bottom: 30px;">üéâ –î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</h2>
                        <p style="font-size: 16px; line-height: 1.6;">–ü—Ä–∏–≤—ñ—Ç, <strong>${name}</strong>!</p>
                        <p style="font-size: 16px; line-height: 1.6;">–ú–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ —É—Å–ø—ñ—à–Ω—É –æ–ø–ª–∞—Ç—É –∫—É—Ä—Å—É <strong>${courseName}</strong>.</p>
                        <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #007bff;">
                            <h3 style="color: #495057; margin-top: 0;">üìã –î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</h3>
                            <p><strong>–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</strong> ${orderId}</p>
                            <p><strong>–ö—É—Ä—Å:</strong> ${courseName}</p>
                            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span style="color: #28a745;">–û–ø–ª–∞—á–µ–Ω–æ ‚úÖ</span></p>
                            <p><strong>–î–∞—Ç–∞:</strong> ${new Date().toLocaleDateString('uk-UA')}</p>
                        </div>
                        <div style="background-color: #e8f5e8; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #28a745;">
                            <h3 style="color: #155724; margin-top: 0;">üéØ –í–∞—à –∫—É—Ä—Å –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!</h3>
                            <p style="color: #155724; margin-bottom: 15px;">–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–æ –∫—É—Ä—Å—É —Ç–∞ –≤—Å—ñ—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤, –ø–µ—Ä–µ–π–¥—ñ—Ç—å –≤ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç:</p>
                            <div style="text-align: center; margin: 20px 0;">
                                <a href="${telegramBotUrl}" style="background-color: #0088cc; color: white; padding: 15px 30px; text-decoration: none; border-radius: 25px; display: inline-block; font-weight: bold; font-size: 16px;">
                                    ü§ñ –ü–µ—Ä–µ–π—Ç–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç
                                </a>
                            </div>
                            <p style="color: #155724; font-size: 14px; text-align: center; background-color: #d4edda; padding: 10px; border-radius: 5px;">
                                üí° –í –±–æ—Ç—ñ –≤–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: <strong>${orderId}</strong>
                            </p>
                        </div>
                        <hr style="border: none; border-top: 1px solid #dee2e6; margin: 30px 0;">
                        <div style="text-align: center; color: #6c757d; font-size: 14px;">
                            <p><strong>TinaSchool</strong></p>
                            <p>¬© 2025 TinaSchool. –í—Å—ñ –ø—Ä–∞–≤–∞ –∑–∞—Ö–∏—â–µ–Ω–æ.</p>
                        </div>
                    </div>
                </div>
            `
        };

        await transporter.sendMail(mailOptions);
        metrics.emailsSent++;
        console.log(`‚úÖ Email –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${email}`);
    } catch (error) {
        metrics.emailsFailed++;
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email –∫–ª—ñ—î–Ω—Ç—É:', error.message);
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
async function sendAdminNotification(email, name, courseName, orderId, price) {
    try {
        const mailOptions = {
            from: EMAIL_FROM,
            to: EMAIL_FROM, // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –≤–ª–∞—Å–Ω—É –ø–æ—à—Ç—É
            subject: `üí∞ –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è - ${orderId}`,
            html: `
                 <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
                    <div style="background-color: #e8f5e8; padding: 20px; border-radius: 8px; border-left: 4px solid #28a745;">
                        <h2 style="color: #28a745; margin-top: 0;">üí∞ –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–ø–ª–∞—á–µ–Ω–æ!</h2>
                        <div style="background-color: white; padding: 20px; border-radius: 8px; margin: 20px 0;">
                            <h3 style="margin-top: 0; color: #495057;">üìã –î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</h3>
                            <table style="width: 100%; border-collapse: collapse;">
                                <tr><td style="padding: 8px; border-bottom: 1px solid #dee2e6;"><strong>–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</strong></td><td style="padding: 8px; border-bottom: 1px solid #dee2e6;">${orderId}</td></tr>
                                <tr><td style="padding: 8px; border-bottom: 1px solid #dee2e6;"><strong>–ö—É—Ä—Å:</strong></td><td style="padding: 8px; border-bottom: 1px solid #dee2e6;">${courseName}</td></tr>
                                <tr><td style="padding: 8px; border-bottom: 1px solid #dee2e6;"><strong>–°—É–º–∞:</strong></td><td style="padding: 8px; border-bottom: 1px solid #dee2e6;"><strong>${price} –≥—Ä–Ω</strong></td></tr>
                                <tr><td style="padding: 8px; border-bottom: 1px solid #dee2e6;"><strong>–Ü–º'—è –∫–ª—ñ—î–Ω—Ç–∞:</strong></td><td style="padding: 8px; border-bottom: 1px solid #dee2e6;">${name}</td></tr>
                                <tr><td style="padding: 8px; border-bottom: 1px solid #dee2e6;"><strong>Email –∫–ª—ñ—î–Ω—Ç–∞:</strong></td><td style="padding: 8px; border-bottom: 1px solid #dee2e6;">${email}</td></tr>
                                <tr><td style="padding: 8px;"><strong>–î–∞—Ç–∞:</strong></td><td style="padding: 8px;">${new Date().toLocaleString('uk-UA')}</td></tr>
                            </table>
                        </div>
                    </div>
                </div>
            `
        };

        await transporter.sendMail(mailOptions);
        console.log('‚úÖ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error.message);
    }
}

// Middleware
app.use(express.static(path.join(__dirname, 'public')));

app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// –ú–∞—Ä—à—Ä—É—Ç–∏
/*app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});
*/
// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
app.get('/stats', (req, res) => {
    const uptime = Date.now() - metrics.startTime;
    const allOrders = readOrders();
    res.json({
        ...metrics,
        totalOrdersInFile: Object.keys(allOrders.orders).length,
        uptime: Math.floor(uptime / 1000) + ' —Å–µ–∫—É–Ω–¥',
        timestamp: new Date().toISOString()
    });
});

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é
app.post('/server-callback', upload.none(), async (req, res) => {
    let paymentData; // –û–≥–æ–ª–æ—à—É—î–º–æ —Ç—É—Ç, —â–æ–± –±—É–ª–æ –≤–∏–¥–Ω–æ –≤ finally
    try {
        console.log('üìû Callback –æ—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥ WayForPay');
        console.log('üìÖ –ß–∞—Å:', new Date().toISOString());

        if (Object.keys(req.body).length === 1 && typeof Object.keys(req.body)[0] === 'string') {
            try {
                paymentData = JSON.parse(Object.keys(req.body)[0]);
                console.log('‚úÖ JSON —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–ø–∞—Ä—Å–µ–Ω–æ –∑ –∫–ª—é—á–∞');
            } catch (e) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON –∑ –∫–ª—é—á–∞:', e.message);
                paymentData = req.body;
            }
        } else {
            paymentData = req.body;
        }
        console.log('üîç –û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ:', JSON.stringify(paymentData, null, 2));

        const { orderReference, transactionStatus, createdDate, merchantSignature } = paymentData;

        if (!orderReference || !transactionStatus || !createdDate || !merchantSignature) {
            console.warn('‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–æ–ª—è –≤ callback-–∑–∞–ø–∏—Ç—ñ.');
            return res.status(400).json({ error: 'Missing required fields' });
        }

        // --- –í–ò–ü–†–ê–í–õ–ï–ù–ê –õ–û–ì–Ü–ö–ê –ü–Ü–î–ü–ò–°–£ ---
        const stringToSign = [
            String(orderReference),
            String(transactionStatus),
            String(createdDate)
        ].join(';');

        const expectedSignature = crypto
            .createHmac('md5', MERCHANT_SECRET_KEY) // –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–ú–û HMAC
            .update(stringToSign)
            .digest('hex');
        // --- –ö–Ü–ù–ï–¶–¨ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø ---

        console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å—É:');
        console.log('   –†—è–¥–æ–∫ –¥–ª—è –ø—ñ–¥–ø–∏—Å—É:', stringToSign);
        console.log('   –û—á—ñ–∫—É–≤–∞–Ω–∏–π –ø—ñ–¥–ø–∏—Å:', expectedSignature);
        console.log('   –û—Ç—Ä–∏–º–∞–Ω–∏–π –ø—ñ–¥–ø–∏—Å:', merchantSignature);
        console.log('   –ü—ñ–¥–ø–∏—Å–∏ –∑–±—ñ–≥–∞—é—Ç—å—Å—è:', expectedSignature === merchantSignature);

        if (expectedSignature !== merchantSignature) {
            console.warn('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø—ñ–¥–ø–∏—Å. –û–±—Ä–æ–±–∫—É –∑—É–ø–∏–Ω–µ–Ω–æ. –ü–ï–†–ï–í–Ü–†–¢–ï SECRET KEY!');
        } else {
            console.log('‚úÖ –ü—ñ–¥–ø–∏—Å –≤—ñ—Ä–Ω–∏–π. –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –æ–±—Ä–æ–±–∫—É.');
            const allOrders = readOrders();
            const customerOrder = allOrders.orders[orderReference];

            if (customerOrder && customerOrder.status !== 'paid') {
                if (transactionStatus === 'Approved') {
                    console.log('‚úÖ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.');
                    customerOrder.status = 'paid';
                    customerOrder.paidAt = new Date().toISOString();
                    customerOrder.wayforpayData = paymentData;
                    writeOrders(allOrders);

                    sendPaymentConfirmationEmail(customerOrder.email, customerOrder.name, customerOrder.courseName, orderReference);
                    sendAdminNotification(customerOrder.email, customerOrder.name, customerOrder.courseName, orderReference, customerOrder.price);
                    metrics.successfulPayments++;
                }
            } else if (customerOrder && customerOrder.status === 'paid') {
                console.log('üîÅ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –±—É–ª–æ –æ–ø–ª–∞—á–µ–Ω–æ.');
            } else {
                console.error('‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ:', orderReference);
            }
        }
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ callback:', error);
    } finally {
        const responseTime = Math.floor(Date.now() / 1000);
        const orderRef = paymentData?.orderReference || 'unknown';
        
        // –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø—ñ–¥–ø–∏—Å –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        const responseStr = [orderRef, 'accept', responseTime].join(';');
        const signature = crypto
            .createHmac('md5', MERCHANT_SECRET_KEY) // –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–ú–û HMAC
            .update(responseStr)
            .digest('hex');
            
        console.log('üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å WayForPay...');
        
        res.json({ 
            orderReference: orderRef, 
            status: 'accept', 
            time: responseTime, 
            signature: signature 
        });
    }
});
// ‚úÖ –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É
const generateOrderId = () => 'ORDER-' + Date.now();

app.post('/create-payment', (req, res) => {
    try {
        const { name, email, course } = req.body;
            let price;
            let courseName;

            if (course === 'solo') {
                price = 1; // –¶—ñ–Ω–∞ –¥–ª—è —Ç–∞—Ä–∏—Ñ—É "–°–∞–º–æ—Å—Ç—ñ–π–Ω–∏–π"
                courseName = '–¢–∞—Ä–∏—Ñ: –°–ê–ú–û–°–¢–Ü–ô–ù–ò–ô';
            } else if (course === 'support') {
                price = 777; // –¶—ñ–Ω–∞ –¥–ª—è —Ç–∞—Ä–∏—Ñ—É "–ó –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é"
                courseName = '–¢–∞—Ä–∏—Ñ: –ó –ü–Ü–î–¢–†–ò–ú–ö–û–Æ';
            } else {
                return res.status(400).json({ error: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ç–∞—Ä–∏—Ñ' });
            }


        const orderReference = generateOrderId();

        const newOrder = {
            name,
            email,
            courseName,
            price,
            status: 'pending',
            createdAt: new Date().toISOString()
        };

        const allOrders = readOrders();
        allOrders.orders[orderReference] = newOrder;
        writeOrders(allOrders);
        metrics.totalOrders++;

        const orderData = {
            merchantAccount: MERCHANT_ACCOUNT,
            merchantDomainName: MERCHANT_DOMAIN_NAME,
            orderReference,
            orderDate: Math.floor(Date.now() / 1000),
            amount: parseFloat(price),
            currency: 'UAH',
            productName: [courseName],
            productPrice: [parseFloat(price)],
            productCount: [1],
            clientEmail: email,
            returnUrl: `${req.protocol}://${req.get('host')}/payment-return?orderReference=${orderReference}`,
            serviceUrl: `${req.protocol}://${req.get('host')}/server-callback`
        };

        const signatureStr = [
            orderData.merchantAccount,
            orderData.merchantDomainName,
            orderData.orderReference,
            orderData.orderDate,
            orderData.amount,
            orderData.currency,
            ...orderData.productName,
            ...orderData.productCount,
            ...orderData.productPrice
        ].join(';');

        const merchantSignature = crypto
            .createHmac('md5', MERCHANT_SECRET_KEY)
            .update(signatureStr)
            .digest('hex');

        orderData.merchantSignature = merchantSignature;

        res.render('redirect-to-wfp', orderData);
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –æ–ø–ª–∞—Ç–∏
app.get('/payment-success', (req, res) => {
    try {
        const { orderReference } = req.query;
        
        if (!orderReference) {
            console.warn('‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ–π orderReference –≤ success URL');
            return res.redirect('/success.html?error=no_order_reference');
        }

        console.log(`‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —É—Å–ø—ñ—Ö—É –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${orderReference}`);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        const allOrders = readOrders();
        const order = allOrders.orders[orderReference];
        
        if (order) {
            res.render('payment-success', {
                orderReference: orderReference,
                courseName: order.courseName,
                customerName: order.name,
                amount: order.price,
                telegramBotUrl: process.env.TELEGRAM_BOT_URL || 'https://t.me/Tinas_cursuribot'
            });
        } else {
            console.warn(`‚ö†Ô∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ${orderReference} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ`);
            res.render('payment-success', {
                orderReference: orderReference,
                courseName: '–ö—É—Ä—Å TinaSchool',
                customerName: '–®–∞–Ω–æ–≤–Ω–∏–π –∫–ª—ñ—î–Ω—Ç',
                amount: '',
                telegramBotUrl: process.env.TELEGRAM_BOT_URL || 'https://t.me/Tinas_cursuribot'
            });
        }
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ —É—Å–ø—ñ—Ö—É:', error);
        res.redirect('/success.html?error=processing_error');
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –Ω–µ—É—Å–ø—ñ—à–Ω–æ—ó –æ–ø–ª–∞—Ç–∏
app.get('/payment-failed', (req, res) => {
    try {
        const { orderReference, reason, reasonCode } = req.query;
        
        console.log(`‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø–æ–º–∏–ª–∫–∏ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${orderReference || '–Ω–µ–≤—ñ–¥–æ–º–æ'}`);
        console.log(`   –ü—Ä–∏—á–∏–Ω–∞: ${reason || '–Ω–µ–≤—ñ–¥–æ–º–∞'}, –∫–æ–¥: ${reasonCode || '–Ω–µ–≤—ñ–¥–æ–º–∏–π'}`);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —è–∫—â–æ —î orderReference
        let order = null;
        if (orderReference) {
            const allOrders = readOrders();
            order = allOrders.orders[orderReference];
        }

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ–¥—É
        let errorMessage = '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–ª–∞—Ç–µ–∂—É';
        let errorDetails = reason || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø—Ä–∏—á–∏–Ω–∞';
        
        switch (reasonCode) {
            case '1101':
                errorMessage = '–ü–ª–∞—Ç—ñ–∂ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∏–π –±–∞–Ω–∫–æ–º';
                errorDetails = '–ë–∞–Ω–∫-–µ–º—ñ—Ç–µ–Ω—Ç –≤—ñ–¥—Ö–∏–ª–∏–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –∫–∞—Ä—Ç–∫—É –∞–±–æ –∑–≤\'—è–∂—ñ—Ç—å—Å—è –∑ –±–∞–Ω–∫–æ–º.';
                break;
            case '1102':
                errorMessage = '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –Ω–∞ –∫–∞—Ä—Ç—Ü—ñ';
                errorDetails = '–ù–∞ –≤–∞—à—ñ–π –∫–∞—Ä—Ç—Ü—ñ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è –∑–¥—ñ–π—Å–Ω–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É.';
                break;
            case '1103':
                errorMessage = '–ö–∞—Ä—Ç–∫–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞';
                errorDetails = '–í–∞—à–∞ –∫–∞—Ä—Ç–∫–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞. –ó–≤\'—è–∂—ñ—Ç—å—Å—è –∑ –±–∞–Ω–∫–æ–º –¥–ª—è —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è.';
                break;
            case '1104':
                errorMessage = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ –∫–∞—Ä—Ç–∫–∏';
                errorDetails = '–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∫–∞—Ä—Ç–∫–∏.';
                break;
            case '1105':
                errorMessage = '–ß–∞—Å –¥—ñ—ó –∫–∞—Ä—Ç–∫–∏ –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è';
                errorDetails = '–¢–µ—Ä–º—ñ–Ω –¥—ñ—ó –≤–∞—à–æ—ó –∫–∞—Ä—Ç–∫–∏ –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —ñ–Ω—à—É –∫–∞—Ä—Ç–∫—É.';
                break;
            default:
                if (reasonCode) {
                    errorMessage = `–ü–æ–º–∏–ª–∫–∞ –ø–ª–∞—Ç–µ–∂—É (–∫–æ–¥: ${reasonCode})`;
                }
        }
        
        res.render('payment-failed', {
            orderReference: orderReference || '–ù–µ–≤—ñ–¥–æ–º–æ',
            courseName: order ? order.courseName : '–ö—É—Ä—Å TinaSchool',
            customerName: order ? order.name : '–®–∞–Ω–æ–≤–Ω–∏–π –∫–ª—ñ—î–Ω—Ç',
            amount: order ? order.price : '',
            errorMessage: errorMessage,
            errorDetails: errorDetails,
            reason: reason || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø—Ä–∏—á–∏–Ω–∞',
            reasonCode: reasonCode || '–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ–¥',
            supportEmail: process.env.EMAIL_FROM || 'support@tinaschool.vip'
        });
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –Ω–µ–≤–¥–∞—á—ñ:', error);
        res.redirect('/failure.html?error=processing_error');
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–æ–±–∫–∏ returnUrl —Ç–∞ failUrl –≤—ñ–¥ WayForPay (–ø—Ä–∏–π–º–∞—î GET —ñ POST)
app.all('/payment-return', (req, res) => {
    try {
        console.log(`‚û°Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –Ω–∞ —Å–∞–π—Ç. –ú–µ—Ç–æ–¥: ${req.method}.`);
        console.log('üì¶ Query params:', req.query);
        console.log('üì¶ Body params:', req.body);
        
        // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ query –∞–±–æ body
        const orderReference = req.query.orderReference || req.body?.orderReference;
        const transactionStatus = req.query.transactionStatus || req.body?.transactionStatus;
        const reason = req.query.reason || req.body?.reason;
        const reasonCode = req.query.reasonCode || req.body?.reasonCode;

        if (!orderReference) {
            console.error('‚ùå WayForPay –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ orderReference –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞.');
            return res.redirect('/payment-failed?error=no_order_id_returned');
        }

        console.log(`‚è≥ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${orderReference}`);
        console.log(`üìä –°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: ${transactionStatus}`);

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –≤ –Ω–∞—à—ñ–π –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        const allOrders = readOrders();
        const order = allOrders.orders[orderReference];
        
        if (!order) {
            console.error(`‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ${orderReference} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ`);
            return res.redirect(`/payment-failed?orderReference=${orderReference}&reason=Order not found&reasonCode=404`);
        }

        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Å—Ç–∞—Ç—É—Å—É
        if (transactionStatus === 'Approved' || order.status === 'paid') {
            console.log(`‚úÖ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —É—Å–ø—ñ—Ö—É –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${orderReference}`);
            res.redirect(`/payment-success?orderReference=${orderReference}`);
        } else if (transactionStatus === 'Declined') {
            console.log(`‚ùå –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø–æ–º–∏–ª–∫–∏ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${orderReference}`);
            res.redirect(`/payment-failed?orderReference=${orderReference}&reason=${encodeURIComponent(reason || 'Payment declined')}&reasonCode=${reasonCode || '1101'}`);
        } else {
            // –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
            console.log(`‚è≥ –°—Ç–∞—Ç—É—Å –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: ${orderReference}`);
            res.redirect(`/status.html?order_id=${orderReference}`);
        }

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ /payment-return:', error);
        res.redirect('/payment-failed?error=return_processing_error');
    }
});
// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É –æ–ø–ª–∞—Ç–∏ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ status.html)  
app.get('/get-payment-status', (req, res) => {
    try {
        const { order_id } = req.query;
        
        if (!order_id) {
            return res.status(400).json({ error: 'Order ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ' });
        }

        const allOrders = readOrders();
        const order = allOrders.orders[order_id];

        if (!order) {
            return res.status(404).json({ error: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
        }

        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        res.json({
            status: order.status === 'paid' ? 'accept' : order.status || 'pending',
            orderId: order_id,
            courseName: order.courseName
        });

    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});
// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('üîÑ –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...');
    transporter.close();
    process.exit(0);
});

process.on('SIGINT', () => {
    console.log('üîÑ –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...');
    transporter.close();
    process.exit(0);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:${PORT}`);
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ http://localhost:${PORT}/stats`);
    console.log(`üìß Email: ${EMAIL_USER} ‚Üí ${EMAIL_HOST}:${EMAIL_PORT}`);

});
