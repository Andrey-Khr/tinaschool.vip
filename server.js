const express = require('express');
const multer = require('multer');
const crypto = require('crypto');
const path = require('path');
const nodemailer = require('nodemailer');
const rateLimit = require('express-rate-limit');
const fs = require('fs');
require('dotenv').config();
const axios = require('axios');

const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.set('trust proxy', 1);
const PORT = process.env.PORT || 3000;
const upload = multer();

// --- –†–æ–±–æ—Ç–∞ –∑ —Ñ–∞–π–ª–æ–º –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å ---
const ORDERS_FILE_PATH = path.join(__dirname, 'orders.json');

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Ñ–∞–π–ª—É
function readOrders() {
    try {
        if (!fs.existsSync(ORDERS_FILE_PATH)) {
            // –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ –∑ –ø–æ—á–∞—Ç–∫–æ–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é
            fs.writeFileSync(ORDERS_FILE_PATH, JSON.stringify({ orders: {} }, null, 2));
        }
        const fileContent = fs.readFileSync(ORDERS_FILE_PATH, 'utf-8');
        return JSON.parse(fileContent);
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É –∑–∞–º–æ–≤–ª–µ–Ω—å:', error);
        return { orders: {} }; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—É—Å—Ç—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø–∏—Å—É –¥–∞–Ω–∏—Ö —É —Ñ–∞–π–ª
function writeOrders(data) {
    try {
        fs.writeFileSync(ORDERS_FILE_PATH, JSON.stringify(data, null, 2), 'utf-8');
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É —É —Ñ–∞–π–ª –∑–∞–º–æ–≤–ª–µ–Ω—å:', error);
    }
}
// --- –ö—ñ–Ω–µ—Ü—å –±–ª–æ–∫—É —Ä–æ–±–æ—Ç–∏ –∑ —Ñ–∞–π–ª–æ–º ---

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
const requiredEnvVars = {
    MERCHANT_ACCOUNT: process.env.MERCHANT_ACCOUNT,
    MERCHANT_SECRET_KEY: process.env.MERCHANT_SECRET_KEY,
    MERCHANT_DOMAIN_NAME: process.env.MERCHANT_DOMAIN_NAME,
    EMAIL_HOST: process.env.EMAIL_HOST,
    EMAIL_USER: process.env.EMAIL_USER,
    EMAIL_PASS: process.env.EMAIL_PASS,
        // Telegram —î –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–º
    TELEGRAM_BOT_TOKEN: process.env.TELEGRAM_BOT_TOKEN,
    TELEGRAM_CHAT_ID: process.env.TELEGRAM_CHAT_ID
};

const missingVars = Object.entries(requiredEnvVars)
    .filter(([key, value]) => !value)
    .map(([key]) => key);

if (missingVars.length > 0) {
    console.error('‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è:', missingVars.join(', '));
    console.error('üìù –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª .env');
    process.exit(1);
}

const MERCHANT_ACCOUNT = process.env.MERCHANT_ACCOUNT;
const MERCHANT_SECRET_KEY = process.env.MERCHANT_SECRET_KEY;
const MERCHANT_DOMAIN_NAME = process.env.MERCHANT_DOMAIN_NAME;

// Email configuration
const EMAIL_HOST = process.env.EMAIL_HOST;
const EMAIL_PORT = process.env.EMAIL_PORT || 587;
const EMAIL_USER = process.env.EMAIL_USER;
const EMAIL_PASS = process.env.EMAIL_PASS;
const EMAIL_FROM = process.env.EMAIL_FROM || process.env.EMAIL_USER;

// –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
const metrics = {
    totalOrders: 0,
    successfulPayments: 0,
    failedPayments: 0,
    emailsSent: 0,
    emailsFailed: 0,
    startTime: Date.now()
};

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –¥–ª—è email
const transporter = nodemailer.createTransport({
    host: EMAIL_HOST,
    port: EMAIL_PORT,
    secure: EMAIL_PORT === 465,
    auth: {
        user: EMAIL_USER,
        pass: EMAIL_PASS
    },
    pool: true,
    maxConnections: 5,
    maxMessages: 100
});

transporter.verify((error, success) => {
    if (error) {
        console.error('‚ùå Email –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ:', error.message);
    } else {
        console.log('‚úÖ Email —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏');
    }
});

// Rate limiting
const paymentLimiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 —Ö–≤–∏–ª–∏–Ω
    max: 10, // –º–∞–∫—Å–∏–º—É–º 10 —Å–ø—Ä–æ–± –Ω–∞ IP
    message: '–ó–∞–±–∞–≥–∞—Ç–æ —Å–ø—Ä–æ–± –æ–ø–ª–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 15 —Ö–≤–∏–ª–∏–Ω.',
    standardHeaders: true,
    legacyHeaders: false
});

// –§—É–Ω–∫—Ü—ñ—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó email
function isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email –∫–ª—ñ—î–Ω—Ç—É
async function sendPaymentConfirmationEmail(email, name, courseName, orderId) {
    try {
        const telegramBotUrl = process.env.TELEGRAM_BOT_URL || 'https://t.me/Tinas_cursuribot';
        
        const mailOptions = {
            from: EMAIL_FROM,
            to: email,
            subject: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ –∫—É—Ä—Å—É - TinaSchool',
            html: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9f9f9;">
                    <div style="background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
                        <h2 style="color: #2c3e50; text-align: center; margin-bottom: 30px;">üéâ –î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</h2>
                        <p style="font-size: 16px; line-height: 1.6;">–ü—Ä–∏–≤—ñ—Ç, <strong>${name}</strong>!</p>
                        <p style="font-size: 16px; line-height: 1.6;">–ú–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ —É—Å–ø—ñ—à–Ω—É –æ–ø–ª–∞—Ç—É –∫—É—Ä—Å—É <strong>${courseName}</strong>.</p>
                        <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #007bff;">
                            <h3 style="color: #495057; margin-top: 0;">üìã –î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</h3>
                            <p><strong>–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</strong> ${orderId}</p>
                            <p><strong>–ö—É—Ä—Å:</strong> ${courseName}</p>
                            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span style="color: #28a745;">–û–ø–ª–∞—á–µ–Ω–æ ‚úÖ</span></p>
                            <p><strong>–î–∞—Ç–∞:</strong> ${new Date().toLocaleDateString('uk-UA')}</p>
                        </div>
                        <div style="background-color: #e8f5e8; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #28a745;">
                            <h3 style="color: #155724; margin-top: 0;">üéØ –í–∞—à –∫—É—Ä—Å –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!</h3>
                            <p style="color: #155724; margin-bottom: 15px;">–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–æ –∫—É—Ä—Å—É —Ç–∞ –≤—Å—ñ—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤, –ø–µ—Ä–µ–π–¥—ñ—Ç—å –≤ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç:</p>
                            <div style="text-align: center; margin: 20px 0;">
                                <a href="${telegramBotUrl}" style="background-color: #0088cc; color: white; padding: 15px 30px; text-decoration: none; border-radius: 25px; display: inline-block; font-weight: bold; font-size: 16px;">
                                    ü§ñ –ü–µ—Ä–µ–π—Ç–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç
                                </a>
                            </div>
                        </div>
                        <hr style="border: none; border-top: 1px solid #dee2e6; margin: 30px 0;">
                        <div style="text-align: center; color: #6c757d; font-size: 14px;">
                            <p><strong>TinaSchool</strong></p>
                            <p>¬© 2025 TinaSchool. –í—Å—ñ –ø—Ä–∞–≤–∞ –∑–∞—Ö–∏—â–µ–Ω–æ.</p>
                        </div>
                    </div>
                </div>
            `
        };

        await transporter.sendMail(mailOptions);
        metrics.emailsSent++;
        console.log(`‚úÖ Email –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${email}`);
    } catch (error) {
        metrics.emailsFailed++;
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email –∫–ª—ñ—î–Ω—Ç—É:', error.message);
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
async function sendAdminNotification(email, name, courseName, orderId, price) {
    try {
        const mailOptions = {
            from: EMAIL_FROM,
            to: EMAIL_FROM, // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –≤–ª–∞—Å–Ω—É –ø–æ—à—Ç—É
            subject: `üí∞ –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è - ${orderId}`,
            html: `
                 <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
                    <div style="background-color: #e8f5e8; padding: 20px; border-radius: 8px; border-left: 4px solid #28a745;">
                        <h2 style="color: #28a745; margin-top: 0;">üí∞ –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–ø–ª–∞—á–µ–Ω–æ!</h2>
                        <div style="background-color: white; padding: 20px; border-radius: 8px; margin: 20px 0;">
                            <h3 style="margin-top: 0; color: #495057;">üìã –î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</h3>
                            <table style="width: 100%; border-collapse: collapse;">
                                <tr><td style="padding: 8px; border-bottom: 1px solid #dee2e6;"><strong>–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</strong></td><td style="padding: 8px; border-bottom: 1px solid #dee2e6;">${orderId}</td></tr>
                                <tr><td style="padding: 8px; border-bottom: 1px solid #dee2e6;"><strong>–ö—É—Ä—Å:</strong></td><td style="padding: 8px; border-bottom: 1px solid #dee2e6;">${courseName}</td></tr>
                                <tr><td style="padding: 8px; border-bottom: 1px solid #dee2e6;"><strong>–°—É–º–∞:</strong></td><td style="padding: 8px; border-bottom: 1px solid #dee2e6;"><strong>${price} –≥—Ä–Ω</strong></td></tr>
                                <tr><td style="padding: 8px; border-bottom: 1px solid #dee2e6;"><strong>–Ü–º'—è –∫–ª—ñ—î–Ω—Ç–∞:</strong></td><td style="padding: 8px; border-bottom: 1px solid #dee2e6;">${name}</td></tr>
                                <tr><td style="padding: 8px; border-bottom: 1px solid #dee2e6;"><strong>Email –∫–ª—ñ—î–Ω—Ç–∞:</strong></td><td style="padding: 8px; border-bottom: 1px solid #dee2e6;">${email}</td></tr>
                                <tr><td style="padding: 8px;"><strong>–î–∞—Ç–∞:</strong></td><td style="padding: 8px;">${new Date().toLocaleString('uk-UA')}</td></tr>
                            </table>
                        </div>
                    </div>
                </div>
            `
        };

        await transporter.sendMail(mailOptions);
        console.log('‚úÖ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error.message);
    }
}
// –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram
async function sendTelegramNotification(email, name, courseName, orderId, price) {
    console.log('üì® –í–∏–∫–ª–∏–∫–∞–Ω–æ sendTelegramNotification –∑ –¥–∞–Ω–∏–º–∏:', {
        email, name, courseName, orderId, price
    });

    try {
        const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
        
        // –ü—ñ–¥—Ç—Ä–∏–º—É—î–º–æ —ñ —Å—Ç–∞—Ä–∏–π —Ñ–æ—Ä–º–∞—Ç (TELEGRAM_CHAT_ID), —ñ –Ω–æ–≤–∏–π (TELEGRAM_CHAT_IDS)
        const singleChatId = process.env.TELEGRAM_CHAT_ID;
        const multipleChatIds = process.env.TELEGRAM_CHAT_IDS;
        
        if (!TELEGRAM_BOT_TOKEN) {
            console.log('‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É');
            return;
        }
        
        // –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ Chat ID
        const chatIds = singleChatId ? [singleChatId] : [];
        
        if (chatIds.length === 0) {
            console.log('‚ö†Ô∏è –ñ–æ–¥–µ–Ω TELEGRAM_CHAT_ID –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É');
            return;
        }

        console.log('ü§ñ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç–∏:', chatIds);

        const message = `‚úÖ –£—Å–ø—ñ—à–Ω–∞ –æ–ø–ª–∞—Ç–∞ –Ω–∞ –∞–¥—Ä–µ—Å—É –º–µ—Ä—á–∞–Ω—Ç–∞ ${MERCHANT_ACCOUNT}

–î–∞–Ω—ñ –ø–ª–∞—Ç–µ–∂—É:
  - –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: Payment for - ${courseName} - (${price}) UAH 
  - –î–∞—Ç–∞: ${new Date().toLocaleString('uk-UA')} 
  - –°—É–º–∞: ${price} UAH
  - Id –ø–ª–∞—Ç–µ–∂—É: ${orderId}
  - –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏: –∫–∞—Ä—Ç–∫–∞
  - –ü–Ü–ë –∫–ª—ñ—î–Ω—Ç–∞: ${name}
  - Email: ${email}`;

        const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
        
        // üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ —É—Å—ñ —á–∞—Ç–∏
        let successCount = 0;
        let errorCount = 0;
        
        for (const chatId of chatIds) {
            try {
                console.log(`üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ —á–∞—Ç: ${chatId}`);
                
                const response = await axios.post(url, {
                    chat_id: chatId,
                    text: message,
                    parse_mode: 'HTML'
                }, {
                    timeout: 10000,
                    headers: { 'Content-Type': 'application/json' }
                });
                
                console.log(`‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${chatId} (message_id: ${response.data.result.message_id})`);
                successCount++;
                
            } catch (error) {
                console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç ${chatId}:`);
                console.error(`   –ü–æ–º–∏–ª–∫–∞: ${error.response?.data?.description || error.message}`);
                
                if (error.response?.status === 403) {
                    console.error(`   üí° –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${chatId} –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞ –∞–±–æ –±–æ—Ç –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É`);
                } else if (error.response?.status === 400) {
                    console.error(`   üí° –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π Chat ID: ${chatId}`);
                }
                
                errorCount++;
            }
        }
        
        console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç Telegram —Ä–æ–∑—Å–∏–ª–∫–∏: ${successCount} —É—Å–ø—ñ—à–Ω–æ, ${errorCount} –ø–æ–º–∏–ª–æ–∫ –∑ ${chatIds.length} —Å–ø—Ä–æ–±`);
        
        if (successCount > 0) {
            console.log('‚úÖ Telegram —Ä–æ–∑—Å–∏–ª–∫–∞ —á–∞—Å—Ç–∫–æ–≤–æ –∞–±–æ –ø–æ–≤–Ω—ñ—Å—Ç—é —É—Å–ø—ñ—à–Ω–∞');
        } else {
            console.error('‚ùå –ñ–æ–¥–Ω–µ Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –±—É–ª–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ');
        }
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ sendTelegramNotification:', error.message);
        console.error('Stack trace:', error.stack);
    }
}

// üì§ –î–æ–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–∑—Å–∏–ª–∫–∏
app.get('/test-telegram-one', async (req, res) => {
    try {
        await sendTelegramNotification(
            'test@example.com',
            '–¢–µ—Å—Ç–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á', 
            '–¢–µ—Å—Ç–æ–≤–∏–π –∫—É—Ä—Å - –æ–¥–∏–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á',
            'ORDER-TEST-ONE-' + Date.now(),
            999,
            process.env.TELEGRAM_CHAT_ID
        );

        res.send('‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–¥–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É!');
    } catch (err) {
        res.send('‚ùå –ü–æ–º–∏–ª–∫–∞: ' + err.message);
    }
});

app.get('/get-chat-ids', async (req, res) => {
    try {
        const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
        if (!TELEGRAM_BOT_TOKEN) {
            return res.send('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π');
        }
        
        const response = await axios.get(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getUpdates`);
        const updates = response.data.result;
        
        if (!updates || updates.length === 0) {
            return res.send(`
                <h2>üì± –Ø–∫ –æ—Ç—Ä–∏–º–∞—Ç–∏ Chat ID:</h2>
                <ol>
                    <li>–í—ñ–¥–∫—Ä–∏–π—Ç–µ Telegram</li>
                    <li>–ó–Ω–∞–π–¥—ñ—Ç—å –≤–∞—à–æ–≥–æ –±–æ—Ç–∞ (–≤—ñ–Ω –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ username)</li>
                    <li>–ù–∞–ø–∏—à—ñ—Ç—å –±–æ—Ç—É –±—É–¥—å-—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "/start"</li>
                    <li>–û–Ω–æ–≤—ñ—Ç—å —Ü—é —Å—Ç–æ—Ä—ñ–Ω–∫—É</li>
                </ol>
                <p><a href="/get-chat-ids">üîÑ –û–Ω–æ–≤–∏—Ç–∏</a></p>
            `);
        }
        
        // –ó–±–∏—Ä–∞—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —á–∞—Ç–∏
        const chats = {};
        updates.forEach(update => {
            if (update.message && update.message.chat) {
                const chat = update.message.chat;
                const chatId = chat.id.toString();
                
                chats[chatId] = {
                    chatId: chatId,
                    name: [chat.first_name, chat.last_name].filter(Boolean).join(' ') || chat.username || '–ù–µ–≤—ñ–¥–æ–º–∏–π',
                    username: chat.username ? '@' + chat.username : null,
                    lastMessage: update.message.text || '',
                    date: new Date(update.message.date * 1000).toLocaleString('uk-UA')
                };
            }
        });
        
        const currentChatIds = process.env.TELEGRAM_CHAT_IDS ? 
            process.env.TELEGRAM_CHAT_IDS.split(',').map(id => id.trim()) : 
            [process.env.TELEGRAM_CHAT_ID].filter(Boolean);
        
        let html = `
            <h2>üì± –í—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ, —è–∫—ñ –ø–∏—Å–∞–ª–∏ –±–æ—Ç—É:</h2>
            <table border="1" style="border-collapse: collapse; width: 100%;">
                <tr style="background: #f0f0f0;">
                    <th>Chat ID</th>
                    <th>–Ü–º'—è</th>
                    <th>Username</th>
                    <th>–û—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</th>
                    <th>–î–∞—Ç–∞</th>
                    <th>–°—Ç–∞—Ç—É—Å</th>
                </tr>
        `;
        
        Object.values(chats).forEach(chat => {
            const isActive = currentChatIds.includes(chat.chatId);
            const statusColor = isActive ? '#28a745' : '#6c757d';
            const statusText = isActive ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π' : '‚ûï –î–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è';
            
            html += `
                <tr>
                    <td><strong>${chat.chatId}</strong></td>
                    <td>${chat.name}</td>
                    <td>${chat.username || '‚Äî'}</td>
                    <td>${chat.lastMessage.substring(0, 30)}${chat.lastMessage.length > 30 ? '...' : ''}</td>
                    <td>${chat.date}</td>
                    <td style="color: ${statusColor};">${statusText}</td>
                </tr>
            `;
        });
        
        html += `
            </table>
            <hr>
            <h3>‚öôÔ∏è –ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:</h3>
            <p><strong>–ê–∫—Ç–∏–≤–Ω—ñ Chat IDs:</strong> ${currentChatIds.join(', ') || '–ù–µ–º–∞—î'}</p>
            
            <h3>üìù –Ø–∫ –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:</h3>
            <ol>
                <li>–°–∫–æ–ø—ñ—é–π—Ç–µ <strong>Chat ID</strong> –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–±–ª–∏—Ü—ñ</li>
                <li>–í—ñ–¥–∫—Ä–∏–π—Ç–µ —Ñ–∞–π–ª <code>.env</code></li>
                <li>–ó–º—ñ–Ω—ñ—Ç—å —Ä—è–¥–æ–∫ –Ω–∞: <code>TELEGRAM_CHAT_IDS=${currentChatIds.join(',')},–ù–û–í–ò–ô_CHAT_ID</code></li>
                <li>–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å —Å–µ—Ä–≤–µ—Ä</li>
            </ol>
            
            <p><a href="/get-chat-ids">üîÑ –û–Ω–æ–≤–∏—Ç–∏</a> | <a href="/test-telegram-all">üì§ –¢–µ—Å—Ç–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞</a></p>
        `;
        
        res.send(html);
        
    } catch (error) {
        res.send('‚ùå –ü–æ–º–∏–ª–∫–∞: ' + error.message);
    }
});

// Middleware
app.use(express.static(path.join(__dirname, 'public')));

app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// –ú–∞—Ä—à—Ä—É—Ç–∏
/*app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});
*/
// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
app.get('/stats', (req, res) => {
    const uptime = Date.now() - metrics.startTime;
    const allOrders = readOrders();
    res.json({
        ...metrics,
        totalOrdersInFile: Object.keys(allOrders.orders).length,
        uptime: Math.floor(uptime / 1000) + ' —Å–µ–∫—É–Ω–¥',
        timestamp: new Date().toISOString()
    });
});

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é
// ‚úÖ –£–ù–Ü–í–ï–†–°–ê–õ–¨–ù–ï –†–Ü–®–ï–ù–ù–Ø –¥–ª—è callback WayForPay
app.post('/server-callback', upload.none(), async (req, res) => {
    let paymentData = null; // ‚Üê –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∑–º—ñ–Ω–Ω—É
    let orderReference = null; // ‚Üê –î–æ–¥–∞—î–º–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ finally
    
    try {
        console.log('üìû Callback –æ—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥ WayForPay');
        console.log('üìÖ –ß–∞—Å:', new Date().toISOString());

        // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–∏—Ö
        if (Object.keys(req.body).length === 1 && typeof Object.keys(req.body)[0] === 'string') {
            try {
                paymentData = JSON.parse(Object.keys(req.body)[0]);
                console.log('‚úÖ JSON —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–ø–∞—Ä—Å–µ–Ω–æ –∑ –∫–ª—é—á–∞');
            } catch (e) {
                paymentData = req.body;
            }
        } else {
            paymentData = req.body;
        }
        
        console.log('üîç –û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ:', JSON.stringify(paymentData, null, 2));

        const { 
            merchantAccount,
            orderReference: orderRef, // ‚Üê –ó–º—ñ–Ω—é—î–º–æ –Ω–∞–∑–≤—É –∑–º—ñ–Ω–Ω–æ—ó —Ç—É—Ç
            amount,
            currency,
            authCode,
            cardPan,
            transactionStatus, 
            reasonCode,
            merchantSignature 
        } = paymentData;

        orderReference = orderRef; // ‚Üê –ü—Ä–∏—Å–≤–æ—é—î–º–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ finally

        if (!orderReference || !transactionStatus || !merchantSignature) {
            console.warn('‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–æ–ª—è –≤ callback-–∑–∞–ø–∏—Ç—ñ.');
            return res.status(400).json({ error: 'Missing required fields' });
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å—É (–≤–∞—à —ñ—Å–Ω—É—é—á–∏–π –∫–æ–¥)
        console.log('üîç –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó –ø–æ–ª—ñ–≤ –¥–ª—è –ø—ñ–¥–ø–∏—Å—É...');

        const fullFields = [
            merchantAccount,
            orderReference, 
            amount,
            currency,
            authCode || '',
            cardPan || '',
            transactionStatus,
            reasonCode || ''
        ];

        const basicFields = [
            merchantAccount,
            orderReference,
            amount,
            currency,
            transactionStatus
        ];

        const fieldsWithDate = [
            merchantAccount,
            orderReference,
            amount,
            currency,
            transactionStatus,
            paymentData.createdDate || ''
        ];

        const withoutMerchant = [
            orderReference, 
            amount,
            currency,
            authCode || '',
            cardPan || '',
            transactionStatus,
            reasonCode || ''
        ];

        const signatureVariants = [
            { name: '–ü–æ–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫', fields: fullFields },
            { name: '–û—Å–Ω–æ–≤–Ω—ñ –ø–æ–ª—è', fields: basicFields },
            { name: '–ó –¥–∞—Ç–æ—é', fields: fieldsWithDate },
            { name: '–ë–µ–∑ merchant', fields: withoutMerchant }
        ];

        let signatureValid = false;
        let validVariant = null;

        for (const variant of signatureVariants) {
            const stringToSign = variant.fields.map(field => String(field || '')).join(';');
            const expectedSignature = crypto
                .createHmac('md5', MERCHANT_SECRET_KEY)
                .update(stringToSign)
                .digest('hex');

            console.log(`üìã ${variant.name}:`);
            console.log(`   –ü–æ–ª—è: [${variant.fields.join(', ')}]`);
            console.log(`   –†—è–¥–æ–∫: ${stringToSign}`);
            console.log(`   –ü—ñ–¥–ø–∏—Å: ${expectedSignature}`);
            console.log(`   –ó–±—ñ–≥–∞—î—Ç—å—Å—è: ${expectedSignature === merchantSignature}`);

            if (expectedSignature === merchantSignature) {
                signatureValid = true;
                validVariant = variant.name;
                break;
            }
        }

        if (signatureValid) {
            console.log(`‚úÖ –ü—ñ–¥–ø–∏—Å –í–ê–õ–Ü–î–ù–ò–ô! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –≤–∞—Ä—ñ–∞–Ω—Ç: ${validVariant}`);
            
            // üîç –î–û–î–ê–¢–ö–û–í–ê –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –§–ê–ô–õ–£ –ó–ê–ú–û–í–õ–ï–ù–¨
            console.log('üîç –ß–∏—Ç–∞—î–º–æ —Ñ–∞–π–ª –∑–∞–º–æ–≤–ª–µ–Ω—å...');
            const allOrders = readOrders();
            console.log('üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å —É —Ñ–∞–π–ª—ñ:', Object.keys(allOrders.orders).length);
            console.log('üîç –û—Å—Ç–∞–Ω–Ω—ñ 5 –∑–∞–º–æ–≤–ª–µ–Ω—å:');
            Object.keys(allOrders.orders)
                .slice(-5)
                .forEach(orderId => {
                    const order = allOrders.orders[orderId];
                    console.log(`   ${orderId}: ${order.status} (${order.createdAt})`);
                });
            
            const customerOrder = allOrders.orders[orderReference];
            
            if (!customerOrder) {
                console.error('‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ:', orderReference);
                console.log('üîç –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:');
                console.log('   1. –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–ª–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –Ω–∞ —ñ–Ω—à–æ–º—É —Å–µ—Ä–≤–µ—Ä—ñ');
                console.log('   2. –§–∞–π–ª orders.json –±—É–≤ –æ—á–∏—â–µ–Ω–∏–π –∞–±–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π');
                console.log('   3. –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–µ');
                console.log('üìã –í—Å—ñ —ñ—Å–Ω—É—é—á—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:');
                Object.keys(allOrders.orders).forEach(orderId => {
                    console.log(`   - ${orderId}`);
                });
                
                // –ù–∞–≤—ñ—Ç—å —è–∫—â–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ª–æ–≥—É—î–º–æ —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
                if (transactionStatus === 'Approved') {
                    console.log('üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è APPROVED, –∞–ª–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!');
                    console.log('üìß –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É...');
                    
                    try {
                        await sendAdminNotification(
                            'unknown@unknown.com',
                            '–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–ª—ñ—î–Ω—Ç',
                            '–ü–û–ú–ò–õ–ö–ê: –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
                            orderReference,
                            amount
                        );
                    } catch (emailError) {
                        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É:', emailError);
                    }
                } else {
                    console.log(`üìä –°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: ${transactionStatus} (${paymentData.reason || '–ë–µ–∑ –ø—Ä–∏—á–∏–Ω–∏'})`);
                }
            } else {
                console.log('‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–æ:', customerOrder);
                
                if (customerOrder.status !== 'paid') {
                    if (transactionStatus === 'Approved') {
                        console.log('‚úÖ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ - –æ–±—Ä–æ–±–ª—è—î–º–æ...');
                        customerOrder.status = 'paid';
                        customerOrder.paidAt = new Date().toISOString();
                        customerOrder.wayforpayData = paymentData;
                        writeOrders(allOrders);

                        console.log('üìß –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ emails —Ç–∞ Telegram...');
                        await Promise.all([
                            sendPaymentConfirmationEmail(
                                customerOrder.email, 
                                customerOrder.name, 
                                customerOrder.courseName, 
                                orderReference
                            ),
                            sendAdminNotification(
                                customerOrder.email, 
                                customerOrder.name, 
                                customerOrder.courseName, 
                                orderReference, 
                                customerOrder.price
                            ),
                            sendTelegramNotification(
                                customerOrder.email,
                                customerOrder.name,
                                customerOrder.courseName,
                                orderReference,
                                customerOrder.price
                            )
                        ]);
                        
                        metrics.successfulPayments++;
                        console.log('üéâ –£—Å–ø—ñ—à–Ω–∞ –æ–ø–ª–∞—Ç–∞ –æ–±—Ä–æ–±–ª–µ–Ω–∞!');
                    } else {
                        console.log(`‚ùå –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏: ${transactionStatus} (${paymentData.reason || '–ë–µ–∑ –ø—Ä–∏—á–∏–Ω–∏'})`);
                        
                        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –Ω–∞ failed —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü–µ –æ—Å—Ç–∞—Ç–æ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞
                        if (['Declined', 'Expired', 'Failed'].includes(transactionStatus)) {
                            customerOrder.status = 'failed';
                            customerOrder.failedAt = new Date().toISOString();
                            customerOrder.failureReason = paymentData.reason;
                            writeOrders(allOrders);
                        }
                        
                        metrics.failedPayments++;
                    }
                } else {
                    console.log('üîÅ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –±—É–ª–æ –æ–ø–ª–∞—á–µ–Ω–æ.');
                }
            }
        } else {
            console.error('‚ùå –ñ–û–î–ï–ù –ø—ñ–¥–ø–∏—Å –Ω–µ –ø—ñ–¥—ñ–π—à–æ–≤!');
            
            // –ù–∞–≤—ñ—Ç—å –∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –ø—ñ–¥–ø–∏—Å–æ–º, —è–∫—â–æ —Ü–µ Approved —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è
            if (transactionStatus === 'Approved') {
                console.log('‚ö†Ô∏è –£–í–ê–ì–ê: Approved —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –ø—ñ–¥–ø–∏—Å–æ–º');
                console.log('üìß –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É...');
                
                try {
                    await sendAdminNotification(
                        'security@tinaschool.com',
                        'SECURITY WARNING',
                        'Approved –ø–ª–∞—Ç—ñ–∂ –∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –ø—ñ–¥–ø–∏—Å–æ–º',
                        orderReference,
                        amount
                    );
                } catch (securityEmailError) {
                    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ security email:', securityEmailError);
                }
            }
        }

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ callback:', error);
        console.error('Stack trace:', error.stack);
    } finally {
        // ‚úÖ –ó–∞–≤–∂–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ
        const responseTime = Math.floor(Date.now() / 1000);
        const orderRef = orderReference || 'unknown'; // ‚Üê –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–µ–∑–ø–µ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
        const responseStr = [orderRef, 'accept', responseTime].join(';');
        const signature = crypto.createHmac('md5', MERCHANT_SECRET_KEY).update(responseStr).digest('hex');
        
        console.log('üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å WayForPay:', {
            orderReference: orderRef,
            status: 'accept',
            time: responseTime,
            signature
        });
        
        res.json({ 
            orderReference: orderRef, 
            status: 'accept', 
            time: responseTime, 
            signature 
        });
    }
});

// –¢–∞–∫–æ–∂ –¥–æ–¥–∞–π—Ç–µ —Ü–µ–π middleware –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ callback
app.use('/server-callback', (req, res, next) => {
    console.log('üìû Incoming request to /server-callback');
    console.log('   Method:', req.method);
    console.log('   Content-Type:', req.headers['content-type']);
    console.log('   Content-Length:', req.headers['content-length']);
    next();
});

// ‚úÖ –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É
const generateOrderId = () => 'ORDER-' + Date.now();

app.post('/create-payment', (req, res) => {
    try {
        const { name, email, course } = req.body;
            let price;
            let courseName;

            if (course === 'solo') {
                price = 700; // –¶—ñ–Ω–∞ –¥–ª—è —Ç–∞—Ä–∏—Ñ—É "–°–∞–º–æ—Å—Ç—ñ–π–Ω–∏–π"
                courseName = '–¢–∞—Ä–∏—Ñ: –°–ê–ú–û–°–¢–Ü–ô–ù–ò–ô';
            } else if (course === 'support') {
                price = 997; // –¶—ñ–Ω–∞ –¥–ª—è —Ç–∞—Ä–∏—Ñ—É "–ó –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é"
                courseName = '–¢–∞—Ä–∏—Ñ: –ó –ü–Ü–î–¢–†–ò–ú–ö–û–Æ';
            } else {
                return res.status(400).json({ error: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ç–∞—Ä–∏—Ñ' });
            }


        const orderReference = generateOrderId();

        const newOrder = {
            name,
            email,
            courseName,
            price,
            status: 'pending',
            createdAt: new Date().toISOString()
        };

        const allOrders = readOrders();
        allOrders.orders[orderReference] = newOrder;
        writeOrders(allOrders);
        metrics.totalOrders++;

        const orderData = {
            merchantAccount: MERCHANT_ACCOUNT,
            merchantDomainName: MERCHANT_DOMAIN_NAME,
            orderReference,
            orderDate: Math.floor(Date.now() / 1000),
            amount: parseFloat(price),
            currency: 'UAH',
            productName: [courseName],
            productPrice: [parseFloat(price)],
            productCount: [1],
            clientEmail: email,
            returnUrl: `${req.protocol}://${req.get('host')}/payment-return`,
            serviceUrl: `${req.protocol}://${req.get('host')}/server-callback`
        };

        const signatureStr = [
            orderData.merchantAccount,
            orderData.merchantDomainName,
            orderData.orderReference,
            orderData.orderDate,
            orderData.amount,
            orderData.currency,
            ...orderData.productName,
            ...orderData.productCount,
            ...orderData.productPrice
        ].join(';');

        const merchantSignature = crypto
            .createHmac('md5', MERCHANT_SECRET_KEY)
            .update(signatureStr)
            .digest('hex');

        orderData.merchantSignature = merchantSignature;

        res.render('redirect-to-wfp', orderData);
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});


// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–æ–±–∫–∏ returnUrl —Ç–∞ failUrl –≤—ñ–¥ WayForPay (–ø—Ä–∏–π–º–∞—î GET —ñ POST)
app.all('/payment-return', (req, res) => {
    try {
        console.log(`‚û°Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –Ω–∞ —Å–∞–π—Ç. –ú–µ—Ç–æ–¥: ${req.method}.`);
        console.log('üîç Query params:', req.query);
        console.log('üîç Body params:', req.body);
        
        // –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ orderReference —É –≤—Å—ñ—Ö –º–æ–∂–ª–∏–≤–∏—Ö –º—ñ—Å—Ü—è—Ö
        let orderId = req.query.orderReference || 
                      req.body?.orderReference || 
                      req.query.order_id ||
                      req.body?.order_id ||
                      req.query.orderRef ||
                      req.body?.orderRef;

        if (orderId) {
            console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ orderId: ${orderId}. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —Å—Ç–∞—Ç—É—Å—É.`);
            return res.redirect(`/status.html?order_id=${orderId}`);
        }

        // –Ø–∫—â–æ orderReference –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É —É—Å–ø—ñ—Ö—É
        console.log('‚ÑπÔ∏è orderReference –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤—ñ–¥ WayForPay (—Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ).');
        console.log('üìÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É —É—Å–ø—ñ—Ö—É.');
        
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —É—Å–ø—ñ—Ö—É –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ order_id
        res.redirect('/success.html');

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ /payment-return:', error);
        res.redirect('/success.html'); // –í—Å–µ –æ–¥–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ —É—Å–ø—ñ—Ö
    }
});

// üîÑ –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –æ–ø–ª–∞—á–µ–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å (–¥–ª—è success.html)
app.get('/get-recent-payments', (req, res) => {
    try {
        const { email } = req.query;
        
        if (!email) {
            return res.status(400).json({ error: 'Email –Ω–µ –≤–∫–∞–∑–∞–Ω–æ' });
        }

        const allOrders = readOrders();
        const userOrders = Object.entries(allOrders.orders)
            .filter(([orderId, order]) => 
                order.email === email && 
                order.status === 'paid' &&
                order.paidAt && 
                // –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ–ø–ª–∞—Ç–∏ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 10 —Ö–≤–∏–ª–∏–Ω
                (Date.now() - new Date(order.paidAt).getTime()) < 10 * 60 * 1000
            )
            .sort(([,a], [,b]) => new Date(b.paidAt).getTime() - new Date(a.paidAt).getTime())
            .slice(0, 3); // –ú–∞–∫—Å–∏–º—É–º 3 –æ—Å—Ç–∞–Ω–Ω—ñ –æ–ø–ª–∞—Ç–∏

        const recentPayments = userOrders.map(([orderId, order]) => ({
            orderId,
            courseName: order.courseName,
            price: order.price,
            paidAt: order.paidAt,
            email: order.email,
            name: order.name
        }));

        res.json({ 
            success: true,
            payments: recentPayments,
            count: recentPayments.length
        });

    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–ª–∞—Ç–µ–∂—ñ–≤:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É –æ–ø–ª–∞—Ç–∏ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ status.html)  
app.get('/get-payment-status', (req, res) => {
    try {
        const { order_id } = req.query;
        
        if (!order_id) {
            return res.status(400).json({ error: 'Order ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ' });
        }

        const allOrders = readOrders();
        const order = allOrders.orders[order_id];

        if (!order) {
            return res.status(404).json({ error: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
        }

        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        res.json({
            status: order.status === 'paid' ? 'accept' : order.status || 'pending',
            orderId: order_id,
            courseName: order.courseName
        });

    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});
// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('üîÑ –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...');
    transporter.close();
    process.exit(0);
});

process.on('SIGINT', () => {
    console.log('üîÑ –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...');
    transporter.close();
    process.exit(0);
});
// üîç –î–æ–¥–∞–π—Ç–µ —Ü–µ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ñ–∞–π–ª—É –∑–∞–º–æ–≤–ª–µ–Ω—å
app.get('/debug-orders', (req, res) => {
    try {
        const { order_id } = req.query;
        const allOrders = readOrders();
        
        if (order_id) {
            // –®—É–∫–∞—î–º–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            const order = allOrders.orders[order_id];
            return res.json({
                found: !!order,
                orderId: order_id,
                order: order || null,
                message: order ? '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–æ' : '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
            });
        }
        
        // –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        const ordersList = Object.entries(allOrders.orders)
            .sort(([,a], [,b]) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())
            .slice(0, 20) // –û—Å—Ç–∞–Ω–Ω—ñ 20
            .map(([orderId, order]) => ({
                orderId,
                status: order.status,
                email: order.email,
                name: order.name,
                courseName: order.courseName,
                price: order.price,
                createdAt: order.createdAt,
                paidAt: order.paidAt
            }));
        
        res.json({
            total: Object.keys(allOrders.orders).length,
            latest20: ordersList,
            filePath: ORDERS_FILE_PATH,
            fileExists: require('fs').existsSync(ORDERS_FILE_PATH)
        });
        
    } catch (error) {
        res.status(500).json({
            error: '–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å',
            details: error.message
        });
    }
});

// üîç –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ—à—É–∫—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ email
app.get('/find-orders-by-email', (req, res) => {
    try {
        const { email } = req.query;
        
        if (!email) {
            return res.status(400).json({ error: 'Email –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π' });
        }
        
        const allOrders = readOrders();
        const userOrders = Object.entries(allOrders.orders)
            .filter(([orderId, order]) => order.email === email)
            .sort(([,a], [,b]) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())
            .map(([orderId, order]) => ({
                orderId,
                status: order.status,
                courseName: order.courseName,
                price: order.price,
                createdAt: order.createdAt,
                paidAt: order.paidAt
            }));
        
        res.json({
            email,
            ordersCount: userOrders.length,
            orders: userOrders
        });
        
    } catch (error) {
        res.status(500).json({
            error: '–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∑–∞–º–æ–≤–ª–µ–Ω—å',
            details: error.message
        });
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:${PORT}`);
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ http://localhost:${PORT}/stats`);
    console.log(`üìß Email: ${EMAIL_USER} ‚Üí ${EMAIL_HOST}:${EMAIL_PORT}`);
});