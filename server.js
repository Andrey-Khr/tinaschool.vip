const express = require('express');
const multer = require('multer');
const crypto = require('crypto');
const path = require('path');
const nodemailer = require('nodemailer');
const rateLimit = require('express-rate-limit');
const fs = require('fs');
require('dotenv').config();

const app = express();
const upload = multer();
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.set('trust proxy', 1);
const PORT = process.env.PORT || 3000;


// --- –†–æ–±–æ—Ç–∞ –∑ —Ñ–∞–π–ª–æ–º –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å ---
const ORDERS_FILE_PATH = path.join(__dirname, 'orders.json');

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Ñ–∞–π–ª—É
function readOrders() {
    try {
        if (!fs.existsSync(ORDERS_FILE_PATH)) {
            // –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ –∑ –ø–æ—á–∞—Ç–∫–æ–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é
            fs.writeFileSync(ORDERS_FILE_PATH, JSON.stringify({ orders: {} }, null, 2));
        }
        const fileContent = fs.readFileSync(ORDERS_FILE_PATH, 'utf-8');
        return JSON.parse(fileContent);
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É –∑–∞–º–æ–≤–ª–µ–Ω—å:', error);
        return { orders: {} }; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—É—Å—Ç—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø–∏—Å—É –¥–∞–Ω–∏—Ö —É —Ñ–∞–π–ª
function writeOrders(data) {
    try {
        fs.writeFileSync(ORDERS_FILE_PATH, JSON.stringify(data, null, 2), 'utf-8');
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É —É —Ñ–∞–π–ª –∑–∞–º–æ–≤–ª–µ–Ω—å:', error);
    }
}
// --- –ö—ñ–Ω–µ—Ü—å –±–ª–æ–∫—É —Ä–æ–±–æ—Ç–∏ –∑ —Ñ–∞–π–ª–æ–º ---

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
const requiredEnvVars = {
    MERCHANT_ACCOUNT: process.env.MERCHANT_ACCOUNT,
    MERCHANT_SECRET_KEY: process.env.MERCHANT_SECRET_KEY,
    MERCHANT_DOMAIN_NAME: process.env.MERCHANT_DOMAIN_NAME,
    EMAIL_HOST: process.env.EMAIL_HOST,
    EMAIL_USER: process.env.EMAIL_USER,
    EMAIL_PASS: process.env.EMAIL_PASS
};

const missingVars = Object.entries(requiredEnvVars)
    .filter(([key, value]) => !value)
    .map(([key]) => key);

if (missingVars.length > 0) {
    console.error('‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è:', missingVars.join(', '));
    console.error('üìù –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª .env');
    process.exit(1);
}

const MERCHANT_ACCOUNT = process.env.MERCHANT_ACCOUNT;
const MERCHANT_SECRET_KEY = process.env.MERCHANT_SECRET_KEY;
const MERCHANT_DOMAIN_NAME = process.env.MERCHANT_DOMAIN_NAME;

// Email configuration
const EMAIL_HOST = process.env.EMAIL_HOST;
const EMAIL_PORT = process.env.EMAIL_PORT || 587;
const EMAIL_USER = process.env.EMAIL_USER;
const EMAIL_PASS = process.env.EMAIL_PASS;
const EMAIL_FROM = process.env.EMAIL_FROM || process.env.EMAIL_USER;

// –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
const metrics = {
    totalOrders: 0,
    successfulPayments: 0,
    failedPayments: 0,
    emailsSent: 0,
    emailsFailed: 0,
    startTime: Date.now()
};

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –¥–ª—è email
const transporter = nodemailer.createTransport({
    host: EMAIL_HOST,
    port: EMAIL_PORT,
    secure: EMAIL_PORT === 465,
    auth: {
        user: EMAIL_USER,
        pass: EMAIL_PASS
    },
    pool: true,
    maxConnections: 5,
    maxMessages: 100
});

transporter.verify((error, success) => {
    if (error) {
        console.error('‚ùå Email –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ:', error.message);
    } else {
        console.log('‚úÖ Email —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏');
    }
});

// Rate limiting
const paymentLimiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 —Ö–≤–∏–ª–∏–Ω
    max: 10, // –º–∞–∫—Å–∏–º—É–º 10 —Å–ø—Ä–æ–± –Ω–∞ IP
    message: '–ó–∞–±–∞–≥–∞—Ç–æ —Å–ø—Ä–æ–± –æ–ø–ª–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 15 —Ö–≤–∏–ª–∏–Ω.',
    standardHeaders: true,
    legacyHeaders: false
});

// –§—É–Ω–∫—Ü—ñ—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó email
function isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email –∫–ª—ñ—î–Ω—Ç—É
async function sendPaymentConfirmationEmail(email, name, courseName, orderId) {
    try {
        const telegramBotUrl = process.env.TELEGRAM_BOT_URL || 'https://t.me/Tinas_cursuribot';
        
        const mailOptions = {
            from: EMAIL_FROM,
            to: email,
            subject: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ –∫—É—Ä—Å—É - TinaSchool',
            html: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9f9f9;">
                    <div style="background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
                        <h2 style="color: #2c3e50; text-align: center; margin-bottom: 30px;">üéâ –î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</h2>
                        <p style="font-size: 16px; line-height: 1.6;">–ü—Ä–∏–≤—ñ—Ç, <strong>${name}</strong>!</p>
                        <p style="font-size: 16px; line-height: 1.6;">–ú–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ —É—Å–ø—ñ—à–Ω—É –æ–ø–ª–∞—Ç—É –∫—É—Ä—Å—É <strong>${courseName}</strong>.</p>
                        <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #007bff;">
                            <h3 style="color: #495057; margin-top: 0;">üìã –î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</h3>
                            <p><strong>–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</strong> ${orderId}</p>
                            <p><strong>–ö—É—Ä—Å:</strong> ${courseName}</p>
                            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span style="color: #28a745;">–û–ø–ª–∞—á–µ–Ω–æ ‚úÖ</span></p>
                            <p><strong>–î–∞—Ç–∞:</strong> ${new Date().toLocaleDateString('uk-UA')}</p>
                        </div>
                        <div style="background-color: #e8f5e8; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #28a745;">
                            <h3 style="color: #155724; margin-top: 0;">üéØ –í–∞—à –∫—É—Ä—Å –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!</h3>
                            <p style="color: #155724; margin-bottom: 15px;">–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–æ –∫—É—Ä—Å—É —Ç–∞ –≤—Å—ñ—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤, –ø–µ—Ä–µ–π–¥—ñ—Ç—å –≤ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç:</p>
                            <div style="text-align: center; margin: 20px 0;">
                                <a href="${telegramBotUrl}" style="background-color: #0088cc; color: white; padding: 15px 30px; text-decoration: none; border-radius: 25px; display: inline-block; font-weight: bold; font-size: 16px;">
                                    ü§ñ –ü–µ—Ä–µ–π—Ç–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç
                                </a>
                            </div>
                            <p style="color: #155724; font-size: 14px; text-align: center; background-color: #d4edda; padding: 10px; border-radius: 5px;">
                                üí° –í –±–æ—Ç—ñ –≤–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: <strong>${orderId}</strong>
                            </p>
                        </div>
                        <hr style="border: none; border-top: 1px solid #dee2e6; margin: 30px 0;">
                        <div style="text-align: center; color: #6c757d; font-size: 14px;">
                            <p><strong>TinaSchool</strong></p>
                            <p>¬© 2025 TinaSchool. –í—Å—ñ –ø—Ä–∞–≤–∞ –∑–∞—Ö–∏—â–µ–Ω–æ.</p>
                        </div>
                    </div>
                </div>
            `
        };

        await transporter.sendMail(mailOptions);
        metrics.emailsSent++;
        console.log(`‚úÖ Email –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${email}`);
    } catch (error) {
        metrics.emailsFailed++;
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email –∫–ª—ñ—î–Ω—Ç—É:', error.message);
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
async function sendAdminNotification(email, name, courseName, orderId, price) {
    try {
        const mailOptions = {
            from: EMAIL_FROM,
            to: EMAIL_FROM, // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –≤–ª–∞—Å–Ω—É –ø–æ—à—Ç—É
            subject: `üí∞ –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è - ${orderId}`,
            html: `
                 <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
                    <div style="background-color: #e8f5e8; padding: 20px; border-radius: 8px; border-left: 4px solid #28a745;">
                        <h2 style="color: #28a745; margin-top: 0;">üí∞ –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–ø–ª–∞—á–µ–Ω–æ!</h2>
                        <div style="background-color: white; padding: 20px; border-radius: 8px; margin: 20px 0;">
                            <h3 style="margin-top: 0; color: #495057;">üìã –î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</h3>
                            <table style="width: 100%; border-collapse: collapse;">
                                <tr><td style="padding: 8px; border-bottom: 1px solid #dee2e6;"><strong>–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</strong></td><td style="padding: 8px; border-bottom: 1px solid #dee2e6;">${orderId}</td></tr>
                                <tr><td style="padding: 8px; border-bottom: 1px solid #dee2e6;"><strong>–ö—É—Ä—Å:</strong></td><td style="padding: 8px; border-bottom: 1px solid #dee2e6;">${courseName}</td></tr>
                                <tr><td style="padding: 8px; border-bottom: 1px solid #dee2e6;"><strong>–°—É–º–∞:</strong></td><td style="padding: 8px; border-bottom: 1px solid #dee2e6;"><strong>${price} –≥—Ä–Ω</strong></td></tr>
                                <tr><td style="padding: 8px; border-bottom: 1px solid #dee2e6;"><strong>–Ü–º'—è –∫–ª—ñ—î–Ω—Ç–∞:</strong></td><td style="padding: 8px; border-bottom: 1px solid #dee2e6;">${name}</td></tr>
                                <tr><td style="padding: 8px; border-bottom: 1px solid #dee2e6;"><strong>Email –∫–ª—ñ—î–Ω—Ç–∞:</strong></td><td style="padding: 8px; border-bottom: 1px solid #dee2e6;">${email}</td></tr>
                                <tr><td style="padding: 8px;"><strong>–î–∞—Ç–∞:</strong></td><td style="padding: 8px;">${new Date().toLocaleString('uk-UA')}</td></tr>
                            </table>
                        </div>
                    </div>
                </div>
            `
        };

        await transporter.sendMail(mailOptions);
        console.log('‚úÖ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error.message);
    }
}

// Middleware
app.use(express.urlencoded({ extended: true }));
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

app.use((req, res, next) => {
    if (req.path === '/server-callback') {
        console.log(`üîç ${req.method} ${req.path}`);
        console.log('üîç Content-Type:', req.headers['content-type']);
        console.log('üîç User-Agent:', req.headers['user-agent']);
        console.log('üîç IP:', req.ip);
    }
    next();
});

app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// –ú–∞—Ä—à—Ä—É—Ç–∏
/*app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});
*/
// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
app.get('/stats', (req, res) => {
    const uptime = Date.now() - metrics.startTime;
    const allOrders = readOrders();
    res.json({
        ...metrics,
        totalOrdersInFile: Object.keys(allOrders.orders).length,
        uptime: Math.floor(uptime / 1000) + ' —Å–µ–∫—É–Ω–¥',
        timestamp: new Date().toISOString()
    });
});

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é
app.post('/create-payment', paymentLimiter, async (req, res) => {
    try {
        const { name, email, course } = req.body;
        
        if (!name || !email || !course) {
            return res.status(400).json({ error: '–í—Å—ñ –ø–æ–ª—è –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ' });
        }
        if (!isValidEmail(email)) {
            return res.status(400).json({ error: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π email –∞–¥—Ä–µ—Å' });
        }
        if (name.length < 2 || name.length > 50) {
            return res.status(400).json({ error: '–Ü–º\'—è –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 2 –¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤' });
        }

        const courses = {
            solo: {
                name: '–ö—É—Ä—Å: –°–∞–º–æ—Å—Ç—ñ–π–Ω–∏–π',
                price: '1' // –í–ò–ü–†–ê–í–õ–ï–ù–û –¶–Ü–ù–£
            },
            support: {
                name: '–ö—É—Ä—Å –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é',
                price: '777' // –í–ò–ü–†–ê–í–õ–ï–ù–û –¶–Ü–ù–£
            }
        };

        const selected = courses[course];
        if (!selected) {
            return res.status(400).json({ error: '–ö—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
        }

        const courseData = {
            name: selected.name,
            price: selected.price,
            currency: 'UAH',
            orderId: `COURSE_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`
        };

        const orderDate = Math.floor(Date.now() / 1000).toString();
        const stringToSign = [
            MERCHANT_ACCOUNT, MERCHANT_DOMAIN_NAME, courseData.orderId,
            orderDate, courseData.price, courseData.currency,
            courseData.name, '1', courseData.price
        ].join(';');

        const merchantSignature = crypto
            .createHmac('md5', MERCHANT_SECRET_KEY)
            .update(stringToSign)
            .digest('hex');

        metrics.totalOrders++;
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É —Ñ–∞–π–ª
        const allOrders = readOrders();
        allOrders.orders[courseData.orderId] = {
            name: name.trim(),
            email: email.toLowerCase().trim(),
            courseName: courseData.name,
            price: courseData.price,
            status: 'pending',
            createdAt: new Date().toISOString()
        };
        writeOrders(allOrders);

        console.log(`üí∞ –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${courseData.orderId}, –∫—É—Ä—Å: ${course}, email: ${email}`);

        const baseUrl = `${req.protocol}://${req.get('host')}`;

        res.render('redirect', {
            merchantAccount: MERCHANT_ACCOUNT,
            merchantDomainName: MERCHANT_DOMAIN_NAME,
            orderId: courseData.orderId,
            orderDate,
            amount: courseData.price,
            currency: courseData.currency,
            courseName: courseData.name,
            clientName: name,
            clientEmail: email,
            serviceUrl: `${baseUrl}/server-callback`,
            returnUrl: `${baseUrl}/payment-return`,
            failUrl: `${baseUrl}/payment-return`,
            signature: merchantSignature
        });

    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –û–±—Ä–æ–±–∫–∞ callback –≤—ñ–¥ –ø–ª–∞—Ç—ñ–∂–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
// –û–±—Ä–æ–±–∫–∞ callback –≤—ñ–¥ –ø–ª–∞—Ç—ñ–∂–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ WayForPay
app.post('/server-callback', upload.none(), async (req, res) => {
    try {
        console.log('üìû Callback –æ—Ç—Ä–∏–º–∞–Ω–æ. –ü–æ–≤–Ω—ñ –¥–∞–Ω—ñ:', JSON.stringify(req.body, null, 2));
        
        let callbackData;
        
        // WayForPay –Ω–∞–¥—Å–∏–ª–∞—î –¥–∞–Ω—ñ –≤ –æ—Å–æ–±–ª–∏–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ - JSON —è–∫ –∫–ª—é—á –æ–±'—î–∫—Ç–∞
        const bodyKeys = Object.keys(req.body);
        if (bodyKeys.length === 1 && bodyKeys[0].startsWith('{')) {
            // –ü–∞—Ä—Å–∏–º–æ JSON –∑ –∫–ª—é—á–∞
            try {
                callbackData = JSON.parse(bodyKeys[0]);
                console.log('üîß –†–æ–∑–ø–∞–∫–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ WayForPay:', callbackData);
            } catch (parseError) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON –∑ –∫–ª—é—á–∞:', parseError);
                return res.status(400).json({ error: 'Invalid JSON format' });
            }
        } else {
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç (—è–∫—â–æ WayForPay –∑–º—ñ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç)
            callbackData = req.body;
        }
        
        // –í–∏—Ç—è–≥—É—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø–æ–ª—è –∑ —Ä–æ–∑–ø–∞–∫–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        const {
            orderReference,
            transactionStatus,
            merchantSignature: wfpSignature,
            processingDate,
            merchantAccount,
            amount,
            currency
        } = callbackData;
        
        console.log(`üìû Callback –¥–µ—Ç–∞–ª—ñ: ${orderReference}, —Å—Ç–∞—Ç—É—Å: ${transactionStatus}`);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
        if (!orderReference || !transactionStatus || !processingDate) {
            console.error('‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –≤ callback:', { 
                orderReference, 
                transactionStatus, 
                processingDate 
            });
            return res.status(400).json({ error: 'Missing required fields' });
        }

        // –î–ª—è WayForPay –ø—ñ–¥–ø–∏—Å —Ñ–æ—Ä–º—É—î—Ç—å—Å—è —ñ–Ω–∞–∫—à–µ
        // –î–ª—è callback –ø—ñ–¥–ø–∏—Å –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞ —ñ–Ω—à–æ—é —Å—Ö–µ–º–æ—é
        const stringToSign = [
            merchantAccount,
            orderReference, 
            amount,
            currency,
            'accept'  // status –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        ].join(';');
        
        const expectedSignature = crypto
            .createHmac('md5', MERCHANT_SECRET_KEY)
            .update(stringToSign)
            .digest('hex');

        console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å—É WayForPay:', {
            stringToSign,
            expected: expectedSignature,
            received: wfpSignature,
            match: expectedSignature === wfpSignature
        });

        // –ü–æ–∫–∏ —â–æ –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –ø—ñ–¥–ø–∏—Å—É –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        if (wfpSignature && expectedSignature !== wfpSignature) {
            console.log('‚ö†Ô∏è –ü—ñ–¥–ø–∏—Å –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—î, –∞–ª–µ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –æ–±—Ä–æ–±–∫—É –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
            // –ù–ï –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –ø–æ–∫–∏ –Ω–µ –Ω–∞–ª–∞–≥–æ–¥–∏–º–æ
            // return res.status(400).json({ error: 'Invalid signature' });
        }

        const allOrders = readOrders();
        const customerOrder = allOrders.orders[orderReference];

        if (!customerOrder) {
            console.error('‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Ñ–∞–π–ª—ñ:', orderReference);
        } else if (customerOrder.status === 'paid') {
            console.log(`üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–∏–π callback –¥–ª—è –≤–∂–µ –æ–ø–ª–∞—á–µ–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${orderReference}`);
        } else {
            // –û–±—Ä–æ–±–ª—è—î–º–æ –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó WayForPay
            if (transactionStatus === 'Approved') {
                metrics.successfulPayments++;
                console.log(`‚úÖ –û–ø–ª–∞—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ WayForPay: ${orderReference}`);
                
                // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —É —Ñ–∞–π–ª—ñ
                customerOrder.status = 'paid';
                customerOrder.paidAt = new Date().toISOString();
                customerOrder.wayforpayData = {
                    transactionStatus,
                    authCode: callbackData.authCode,
                    cardPan: callbackData.cardPan,
                    paymentSystem: callbackData.paymentSystem
                };
                writeOrders(allOrders);
                
                // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ email
                sendPaymentConfirmationEmail(
                    customerOrder.email, customerOrder.name, customerOrder.courseName, orderReference
                ).catch(err => console.error('‚ùå Email error:', err.message));
                
                sendAdminNotification(
                    customerOrder.email, customerOrder.name, customerOrder.courseName, orderReference, customerOrder.price
                ).catch(err => console.error('‚ùå Admin email error:', err.message));

            } else if (transactionStatus === 'Declined') {
                metrics.failedPayments++;
                console.log(`‚ùå –û–ø–ª–∞—Ç–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞ WayForPay: ${orderReference}, –ø—Ä–∏—á–∏–Ω–∞: ${callbackData.reason}`);

                customerOrder.status = 'declined';
                customerOrder.declinedAt = new Date().toISOString();
                customerOrder.declineReason = callbackData.reason;
                writeOrders(allOrders);
            }
        }

        // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è WayForPay
        const responseTime = Math.floor(Date.now() / 1000);
        const responseString = [
            callbackData.merchantAccount,
            orderReference,
            'accept',
            responseTime
        ].join(';');
        
        const responseSignature = crypto
            .createHmac('md5', MERCHANT_SECRET_KEY)
            .update(responseString)
            .digest('hex');

        const response = {
            orderReference,
            status: 'accept',
            time: responseTime,
            signature: responseSignature
        };

        console.log('üì§ –í—ñ–¥–ø–æ–≤—ñ–¥—å WayForPay:', response);
        res.json(response);

    } catch (err) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ callback:', err);
        res.status(500).json({ error: 'Server error' });
    }
});

// –î–æ–¥–∞—Ç–∫–æ–≤–∏–π middleware –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É WayForPay
app.use('/server-callback', (req, res, next) => {
    console.log('üîç RAW body before processing:', req.body);
    console.log('üîç Body type:', typeof req.body);
    console.log('üîç Body keys:', Object.keys(req.body));
    next();
});
// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ callback –¥–ª—è GET –∑–∞–ø–∏—Ç—ñ–≤
app.get('/server-callback', async (req, res) => {
    console.log('üìû GET Callback –æ—Ç—Ä–∏–º–∞–Ω–æ:', req.query);
    
    const { orderReference, status, time, merchantSignature: wfpSignature } = req.query;
    
    if (!orderReference || !status || !time) {
        console.error('‚ùå GET callback: –≤—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è');
        return res.status(400).json({ error: 'Missing required fields' });
    }
    
    // –¢–æ–π —Å–∞–º–∏–π –∫–æ–¥ –æ–±—Ä–æ–±–∫–∏, —â–æ —ñ –¥–ª—è POST
    const stringToSign = [orderReference, status, time].join(';');
    const expectedSignature = crypto
        .createHmac('md5', MERCHANT_SECRET_KEY)
        .update(stringToSign)
        .digest('hex');

    if (expectedSignature !== wfpSignature) {
        console.error('‚ùå GET callback –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø—ñ–¥–ø–∏—Å');
        return res.status(400).json({ error: 'Invalid signature' });
    }
    
    res.json({ status: 'ok', message: 'GET callback processed' });
});

// –¢–µ—Å—Ç–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏)
if (process.env.NODE_ENV !== 'production') {
    app.post('/test-callback', (req, res) => {
        console.log('üß™ –¢–µ—Å—Ç–æ–≤–∏–π callback:', req.body);
        res.json({ received: req.body });
    });
}


// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–æ–±–∫–∏ returnUrl —Ç–∞ failUrl –≤—ñ–¥ WayForPay (–ø—Ä–∏–π–º–∞—î GET —ñ POST)
app.all('/payment-return', (req, res) => {
    try {
        console.log(`‚ö†Ô∏è  –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –Ω–∞ —Å–∞–π—Ç. –ú–µ—Ç–æ–¥: ${req.method}.`);
        console.log('üì¶  –î–∞–Ω—ñ –≤—ñ–¥ –±—Ä–∞—É–∑–µ—Ä–∞:', req.body || req.query);

        const allOrdersData = readOrders();
        const orders = allOrdersData.orders;
        
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ ID –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        const latestOrderId = Object.keys(orders).sort((a, b) => {
            const timeA = new Date(orders[a].createdAt).getTime();
            const timeB = new Date(orders[b].createdAt).getTime();
            return timeB - timeA;
        })[0];

        if (!latestOrderId) {
            console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∂–æ–¥–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É —Ñ–∞–π–ª—ñ.');
            return res.redirect('/failure.html?error=no_orders_found');
        }

        console.log(`‚è≥  –ó–Ω–∞–π–¥–µ–Ω–æ –æ—Å—Ç–∞–Ω–Ω—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${latestOrderId}. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É.`);
        
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —Å—Ç–∞—Ç—É—Å—É –∑ ID –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        res.redirect(`/status.html?order_id=${latestOrderId}`);

    } catch (error) {
        console.error('‚ùå  –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ /payment-return:', error);
        res.redirect('/failure.html?error=return_processing_error');
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É –æ–ø–ª–∞—Ç–∏ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ status.html)  
app.get('/get-payment-status', (req, res) => {
    try {
        const { order_id } = req.query;
        
        if (!order_id) {
            return res.status(400).json({ error: 'Order ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ' });
        }

        const allOrders = readOrders();
        const order = allOrders.orders[order_id];

        if (!order) {
            return res.status(404).json({ error: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
        }

        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        res.json({
            status: order.status === 'paid' ? 'accept' : order.status || 'pending',
            orderId: order_id,
            courseName: order.courseName
        });

    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});
// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('üîÑ –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...');
    transporter.close();
    process.exit(0);
});

process.on('SIGINT', () => {
    console.log('üîÑ –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...');
    transporter.close();
    process.exit(0);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:${PORT}`);
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ http://localhost:${PORT}/stats`);
    console.log(`üìß Email: ${EMAIL_USER} ‚Üí ${EMAIL_HOST}:${EMAIL_PORT}`);
});