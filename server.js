const express = require('express');
const multer = require('multer');
const crypto = require('crypto');
const path = require('path');
const nodemailer = require('nodemailer');
const rateLimit = require('express-rate-limit');
const fs = require('fs');
require('dotenv').config();

const app = express();
app.use(express.json());
console.log('üîë SECRET_KEY:', process.env.MERCHANT_SECRET_KEY);
app.use(express.urlencoded({ extended: true }));
app.set('trust proxy', 1);
const PORT = process.env.PORT || 3000;
const upload = multer();

// --- –†–æ–±–æ—Ç–∞ –∑ —Ñ–∞–π–ª–æ–º –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å ---
const ORDERS_FILE_PATH = path.join(__dirname, 'orders.json');

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Ñ–∞–π–ª—É
function readOrders() {
    try {
        if (!fs.existsSync(ORDERS_FILE_PATH)) {
            // –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ –∑ –ø–æ—á–∞—Ç–∫–æ–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é
            fs.writeFileSync(ORDERS_FILE_PATH, JSON.stringify({ orders: {} }, null, 2));
        }
        const fileContent = fs.readFileSync(ORDERS_FILE_PATH, 'utf-8');
        return JSON.parse(fileContent);
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É –∑–∞–º–æ–≤–ª–µ–Ω—å:', error);
        return { orders: {} }; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—É—Å—Ç—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø–∏—Å—É –¥–∞–Ω–∏—Ö —É —Ñ–∞–π–ª
function writeOrders(data) {
    try {
        fs.writeFileSync(ORDERS_FILE_PATH, JSON.stringify(data, null, 2), 'utf-8');
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É —É —Ñ–∞–π–ª –∑–∞–º–æ–≤–ª–µ–Ω—å:', error);
    }
}
// --- –ö—ñ–Ω–µ—Ü—å –±–ª–æ–∫—É —Ä–æ–±–æ—Ç–∏ –∑ —Ñ–∞–π–ª–æ–º ---

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
const requiredEnvVars = {
    MERCHANT_ACCOUNT: process.env.MERCHANT_ACCOUNT,
    MERCHANT_SECRET_KEY: process.env.MERCHANT_SECRET_KEY,
    MERCHANT_DOMAIN_NAME: process.env.MERCHANT_DOMAIN_NAME,
    EMAIL_HOST: process.env.EMAIL_HOST,
    EMAIL_USER: process.env.EMAIL_USER,
    EMAIL_PASS: process.env.EMAIL_PASS
};

const missingVars = Object.entries(requiredEnvVars)
    .filter(([key, value]) => !value)
    .map(([key]) => key);

if (missingVars.length > 0) {
    console.error('‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è:', missingVars.join(', '));
    console.error('üìù –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª .env');
    process.exit(1);
}

const MERCHANT_ACCOUNT = process.env.MERCHANT_ACCOUNT;
const MERCHANT_SECRET_KEY = process.env.MERCHANT_SECRET_KEY;
const MERCHANT_DOMAIN_NAME = process.env.MERCHANT_DOMAIN_NAME;

// Email configuration
const EMAIL_HOST = process.env.EMAIL_HOST;
const EMAIL_PORT = process.env.EMAIL_PORT || 587;
const EMAIL_USER = process.env.EMAIL_USER;
const EMAIL_PASS = process.env.EMAIL_PASS;
const EMAIL_FROM = process.env.EMAIL_FROM || process.env.EMAIL_USER;

// –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
const metrics = {
    totalOrders: 0,
    successfulPayments: 0,
    failedPayments: 0,
    emailsSent: 0,
    emailsFailed: 0,
    startTime: Date.now()
};

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –¥–ª—è email
const transporter = nodemailer.createTransport({
    host: EMAIL_HOST,
    port: EMAIL_PORT,
    secure: EMAIL_PORT === 465,
    auth: {
        user: EMAIL_USER,
        pass: EMAIL_PASS
    },
    pool: true,
    maxConnections: 5,
    maxMessages: 100
});

transporter.verify((error, success) => {
    if (error) {
        console.error('‚ùå Email –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ:', error.message);
    } else {
        console.log('‚úÖ Email —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏');
    }
});

// Rate limiting
const paymentLimiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 —Ö–≤–∏–ª–∏–Ω
    max: 10, // –º–∞–∫—Å–∏–º—É–º 10 —Å–ø—Ä–æ–± –Ω–∞ IP
    message: '–ó–∞–±–∞–≥–∞—Ç–æ —Å–ø—Ä–æ–± –æ–ø–ª–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 15 —Ö–≤–∏–ª–∏–Ω.',
    standardHeaders: true,
    legacyHeaders: false
});

// –§—É–Ω–∫—Ü—ñ—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó email
function isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email –∫–ª—ñ—î–Ω—Ç—É
async function sendPaymentConfirmationEmail(email, name, courseName, orderId) {
    try {
        const telegramBotUrl = process.env.TELEGRAM_BOT_URL || 'https://t.me/Tinas_cursuribot';
        
        const mailOptions = {
            from: EMAIL_FROM,
            to: email,
            subject: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ –∫—É—Ä—Å—É - TinaSchool',
            html: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9f9f9;">
                    <div style="background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
                        <h2 style="color: #2c3e50; text-align: center; margin-bottom: 30px;">üéâ –î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</h2>
                        <p style="font-size: 16px; line-height: 1.6;">–ü—Ä–∏–≤—ñ—Ç, <strong>${name}</strong>!</p>
                        <p style="font-size: 16px; line-height: 1.6;">–ú–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ —É—Å–ø—ñ—à–Ω—É –æ–ø–ª–∞—Ç—É –∫—É—Ä—Å—É <strong>${courseName}</strong>.</p>
                        <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #007bff;">
                            <h3 style="color: #495057; margin-top: 0;">üìã –î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</h3>
                            <p><strong>–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</strong> ${orderId}</p>
                            <p><strong>–ö—É—Ä—Å:</strong> ${courseName}</p>
                            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span style="color: #28a745;">–û–ø–ª–∞—á–µ–Ω–æ ‚úÖ</span></p>
                            <p><strong>–î–∞—Ç–∞:</strong> ${new Date().toLocaleDateString('uk-UA')}</p>
                        </div>
                        <div style="background-color: #e8f5e8; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #28a745;">
                            <h3 style="color: #155724; margin-top: 0;">üéØ –í–∞—à –∫—É—Ä—Å –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!</h3>
                            <p style="color: #155724; margin-bottom: 15px;">–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–æ –∫—É—Ä—Å—É —Ç–∞ –≤—Å—ñ—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤, –ø–µ—Ä–µ–π–¥—ñ—Ç—å –≤ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç:</p>
                            <div style="text-align: center; margin: 20px 0;">
                                <a href="${telegramBotUrl}" style="background-color: #0088cc; color: white; padding: 15px 30px; text-decoration: none; border-radius: 25px; display: inline-block; font-weight: bold; font-size: 16px;">
                                    ü§ñ –ü–µ—Ä–µ–π—Ç–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç
                                </a>
                            </div>
                            <p style="color: #155724; font-size: 14px; text-align: center; background-color: #d4edda; padding: 10px; border-radius: 5px;">
                                üí° –í –±–æ—Ç—ñ –≤–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: <strong>${orderId}</strong>
                            </p>
                        </div>
                        <hr style="border: none; border-top: 1px solid #dee2e6; margin: 30px 0;">
                        <div style="text-align: center; color: #6c757d; font-size: 14px;">
                            <p><strong>TinaSchool</strong></p>
                            <p>¬© 2025 TinaSchool. –í—Å—ñ –ø—Ä–∞–≤–∞ –∑–∞—Ö–∏—â–µ–Ω–æ.</p>
                        </div>
                    </div>
                </div>
            `
        };

        await transporter.sendMail(mailOptions);
        metrics.emailsSent++;
        console.log(`‚úÖ Email –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${email}`);
    } catch (error) {
        metrics.emailsFailed++;
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email –∫–ª—ñ—î–Ω—Ç—É:', error.message);
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
async function sendAdminNotification(email, name, courseName, orderId, price) {
    try {
        const mailOptions = {
            from: EMAIL_FROM,
            to: EMAIL_FROM, // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –≤–ª–∞—Å–Ω—É –ø–æ—à—Ç—É
            subject: `üí∞ –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è - ${orderId}`,
            html: `
                 <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
                    <div style="background-color: #e8f5e8; padding: 20px; border-radius: 8px; border-left: 4px solid #28a745;">
                        <h2 style="color: #28a745; margin-top: 0;">üí∞ –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–ø–ª–∞—á–µ–Ω–æ!</h2>
                        <div style="background-color: white; padding: 20px; border-radius: 8px; margin: 20px 0;">
                            <h3 style="margin-top: 0; color: #495057;">üìã –î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</h3>
                            <table style="width: 100%; border-collapse: collapse;">
                                <tr><td style="padding: 8px; border-bottom: 1px solid #dee2e6;"><strong>–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</strong></td><td style="padding: 8px; border-bottom: 1px solid #dee2e6;">${orderId}</td></tr>
                                <tr><td style="padding: 8px; border-bottom: 1px solid #dee2e6;"><strong>–ö—É—Ä—Å:</strong></td><td style="padding: 8px; border-bottom: 1px solid #dee2e6;">${courseName}</td></tr>
                                <tr><td style="padding: 8px; border-bottom: 1px solid #dee2e6;"><strong>–°—É–º–∞:</strong></td><td style="padding: 8px; border-bottom: 1px solid #dee2e6;"><strong>${price} –≥—Ä–Ω</strong></td></tr>
                                <tr><td style="padding: 8px; border-bottom: 1px solid #dee2e6;"><strong>–Ü–º'—è –∫–ª—ñ—î–Ω—Ç–∞:</strong></td><td style="padding: 8px; border-bottom: 1px solid #dee2e6;">${name}</td></tr>
                                <tr><td style="padding: 8px; border-bottom: 1px solid #dee2e6;"><strong>Email –∫–ª—ñ—î–Ω—Ç–∞:</strong></td><td style="padding: 8px; border-bottom: 1px solid #dee2e6;">${email}</td></tr>
                                <tr><td style="padding: 8px;"><strong>–î–∞—Ç–∞:</strong></td><td style="padding: 8px;">${new Date().toLocaleString('uk-UA')}</td></tr>
                            </table>
                        </div>
                    </div>
                </div>
            `
        };

        await transporter.sendMail(mailOptions);
        console.log('‚úÖ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error.message);
    }
}

// Middleware
app.use(express.static(path.join(__dirname, 'public')));

app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// –ú–∞—Ä—à—Ä—É—Ç–∏
/*app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});
*/
// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
app.get('/stats', (req, res) => {
    const uptime = Date.now() - metrics.startTime;
    const allOrders = readOrders();
    res.json({
        ...metrics,
        totalOrdersInFile: Object.keys(allOrders.orders).length,
        uptime: Math.floor(uptime / 1000) + ' —Å–µ–∫—É–Ω–¥',
        timestamp: new Date().toISOString()
    });
});

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é
app.post('/server-callback', upload.none(), async (req, res) => {
   
   let paymentData;

    try {
        console.log('üìû Callback –æ—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥ WayForPay');
        console.log('üìÖ –ß–∞—Å:', new Date().toISOString());
         
        if (
            Object.keys(req.body).length === 1 &&
            typeof Object.keys(req.body)[0] === 'string' &&
            req.headers['content-type'] === 'application/x-www-form-urlencoded'
        ) {
            try {
                paymentData = JSON.parse(Object.keys(req.body)[0]);
            } catch (e) {
                console.warn('‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON –∑ –∫–ª—é—á–∞:', e.message);
                return res.status(400).send('Invalid JSON format in callback');
            }
        } else {
            paymentData = req.body;
        }

        console.log('üîç –û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ:', JSON.stringify(paymentData, null, 2));

        const { orderReference, transactionStatus, createdDate, merchantSignature } = paymentData;

        if (!orderReference || !transactionStatus || !createdDate || !merchantSignature) {
            console.warn('‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–æ–ª—è –≤ callback-–∑–∞–ø–∏—Ç—ñ.');
            return res.status(400).json({ error: 'Missing required fields' });
        }
    
         const stringToSign = `${orderReference};${transactionStatus};${createdDate}`;


        console.log('üß™ –¢–∏–ø–∏:', {
        orderReference: typeof orderReference,
        transactionStatus: typeof transactionStatus,
        createdDate: typeof createdDate
        });

        const expectedSignature = crypto
        .createHmac('md5', process.env.MERCHANT_SECRET_KEY)
        .update(stringToSign)
        .digest('hex');

        console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å—É:');
        console.log('   –†—è–¥–æ–∫ –¥–ª—è –ø—ñ–¥–ø–∏—Å—É:', stringToSign);
        console.log('   –û—á—ñ–∫—É–≤–∞–Ω–∏–π –ø—ñ–¥–ø–∏—Å:', expectedSignature);
        console.log('   –û—Ç—Ä–∏–º–∞–Ω–∏–π –ø—ñ–¥–ø–∏—Å:', merchantSignature);
        console.log('   –ü—ñ–¥–ø–∏—Å–∏ –∑–±—ñ–≥–∞—é—Ç—å—Å—è:', expectedSignature === merchantSignature);

        if (expectedSignature !== merchantSignature) {
            console.warn('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø—ñ–¥–ø–∏—Å. –û–±—Ä–æ–±–∫—É –∑—É–ø–∏–Ω–µ–Ω–æ. –ü–ï–†–ï–í–Ü–†–¢–ï SECRET KEY!');
        } else {
            console.log('‚úÖ –ü—ñ–¥–ø–∏—Å –≤—ñ—Ä–Ω–∏–π. –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –æ–±—Ä–æ–±–∫—É.');
            const allOrders = readOrders();
            const customerOrder = allOrders.orders[orderReference];

            if (customerOrder && customerOrder.status !== 'paid') {
                if (transactionStatus === 'Approved') {
                    console.log('‚úÖ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.');
                    customerOrder.status = 'paid';
                    customerOrder.paidAt = new Date().toISOString();
                    customerOrder.wayforpayData = paymentData;
                    writeOrders(allOrders);

                    sendPaymentConfirmationEmail(customerOrder.email, customerOrder.name, customerOrder.courseName, orderReference);
                    sendAdminNotification(customerOrder.email, customerOrder.name, customerOrder.courseName, orderReference, customerOrder.price);
                    metrics.successfulPayments++;
                }
            } else if (customerOrder && customerOrder.status === 'paid') {
                console.log('üîÅ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –±—É–ª–æ –æ–ø–ª–∞—á–µ–Ω–æ.');
            } else {
                console.error('‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ:', orderReference);
            }
        }
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ callback:', error);
    } finally {
        const responseTime = Math.floor(Date.now() / 1000);
        const orderRef = paymentData?.orderReference || 'unknown';
        const responseStr = [orderRef, 'accept', responseTime].join(';');
        const signature = crypto.createHmac('md5', MERCHANT_SECRET_KEY).update(responseStr).digest('hex');
        res.json({ orderReference: orderRef, status: 'accept', time: responseTime, signature });
    }
});

// –¢–∞–∫–æ–∂ –¥–æ–¥–∞–π—Ç–µ —Ü–µ–π middleware –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ callback
app.use('/server-callback', (req, res, next) => {
    console.log('üìû Incoming request to /server-callback');
    console.log('   Method:', req.method);
    console.log('   Content-Type:', req.headers['content-type']);
    console.log('   Content-Length:', req.headers['content-length']);
    next();
});

// ‚úÖ –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É
const generateOrderId = () => 'ORDER-' + Date.now();

app.post('/create-payment', (req, res) => {
    try {
        const { name, email, course } = req.body;
            let price;
            let courseName;

            if (course === 'solo') {
                price = 1; // –¶—ñ–Ω–∞ –¥–ª—è —Ç–∞—Ä–∏—Ñ—É "–°–∞–º–æ—Å—Ç—ñ–π–Ω–∏–π"
                courseName = '–¢–∞—Ä–∏—Ñ: –°–ê–ú–û–°–¢–Ü–ô–ù–ò–ô';
            } else if (course === 'support') {
                price = 777; // –¶—ñ–Ω–∞ –¥–ª—è —Ç–∞—Ä–∏—Ñ—É "–ó –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é"
                courseName = '–¢–∞—Ä–∏—Ñ: –ó –ü–Ü–î–¢–†–ò–ú–ö–û–Æ';
            } else {
                return res.status(400).json({ error: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ç–∞—Ä–∏—Ñ' });
            }


        const orderReference = generateOrderId();

        const newOrder = {
            name,
            email,
            courseName,
            price,
            status: 'pending',
            createdAt: new Date().toISOString()
        };

        const allOrders = readOrders();
        allOrders.orders[orderReference] = newOrder;
        writeOrders(allOrders);
        metrics.totalOrders++;

        const orderData = {
            merchantAccount: MERCHANT_ACCOUNT,
            merchantDomainName: MERCHANT_DOMAIN_NAME,
            orderReference,
            orderDate: Math.floor(Date.now() / 1000),
            amount: parseFloat(price),
            currency: 'UAH',
            productName: [courseName],
            productPrice: [parseFloat(price)],
            productCount: [1],
            clientEmail: email,
            returnUrl: `${req.protocol}://${req.get('host')}/payment-return?orderReference=${orderReference}`,
            serviceUrl: `${req.protocol}://${req.get('host')}/server-callback`
        };

        const signatureStr = [
            orderData.merchantAccount,
            orderData.merchantDomainName,
            orderData.orderReference,
            orderData.orderDate,
            orderData.amount,
            orderData.currency,
            ...orderData.productName,
            ...orderData.productCount,
            ...orderData.productPrice
        ].join(';');

        const merchantSignature = crypto
            .createHmac('md5', MERCHANT_SECRET_KEY)
            .update(signatureStr)
            .digest('hex');

        orderData.merchantSignature = merchantSignature;

        res.render('redirect-to-wfp', orderData);
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});


// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–æ–±–∫–∏ returnUrl —Ç–∞ failUrl –≤—ñ–¥ WayForPay (–ø—Ä–∏–π–º–∞—î GET —ñ POST)
app.all('/payment-return', (req, res) => {
    try {
        console.log(`‚û°Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –Ω–∞ —Å–∞–π—Ç. –ú–µ—Ç–æ–¥: ${req.method}.`);
        
        // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ req.query (–¥–ª—è GET-–∑–∞–ø–∏—Ç—ñ–≤), –ø–æ—Ç—ñ–º req.body (–¥–ª—è POST).
        const orderId = req.query.orderReference || (req.body && req.body.orderReference);

        if (!orderId) {
            console.error('‚ùå WayForPay –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ orderReference –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞.');
            // –Ø–∫—â–æ ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ–º–∞—î, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑–∞–≥–∞–ª—å–Ω–æ—ó –ø–æ–º–∏–ª–∫–∏.
            return res.redirect('/failure.html?error=no_order_id_returned');
        }

        console.log(`‚è≥ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${orderId}. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É.`);
        
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É —Å—Ç–∞—Ç—É—Å—É –∑ –ö–û–ù–ö–†–ï–¢–ù–ò–ú ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        res.redirect(`/status.html?order_id=${orderId}`);

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ /payment-return:', error);
        res.redirect('/failure.html?error=return_processing_error');
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É –æ–ø–ª–∞—Ç–∏ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ status.html)  
app.get('/get-payment-status', (req, res) => {
    try {
        const { order_id } = req.query;
        
        if (!order_id) {
            return res.status(400).json({ error: 'Order ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ' });
        }

        const allOrders = readOrders();
        const order = allOrders.orders[order_id];

        if (!order) {
            return res.status(404).json({ error: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
        }

        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        res.json({
            status: order.status === 'paid' ? 'accept' : order.status || 'pending',
            orderId: order_id,
            courseName: order.courseName
        });

    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});
// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('üîÑ –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...');
    transporter.close();
    process.exit(0);
});

process.on('SIGINT', () => {
    console.log('üîÑ –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...');
    transporter.close();
    process.exit(0);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:${PORT}`);
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ http://localhost:${PORT}/stats`);
    console.log(`üìß Email: ${EMAIL_USER} ‚Üí ${EMAIL_HOST}:${EMAIL_PORT}`);

});