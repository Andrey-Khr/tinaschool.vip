const express = require('express');
const bodyParser = require('body-parser');
const crypto = require('crypto');
const path = require('path');
const nodemailer = require('nodemailer');
const rateLimit = require('express-rate-limit');
require('dotenv').config();

const app = express();
app.set('trust proxy', 1);
const PORT = process.env.PORT || 3000;

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
const requiredEnvVars = {
    MERCHANT_ACCOUNT: process.env.MERCHANT_ACCOUNT,
    MERCHANT_SECRET_KEY: process.env.MERCHANT_SECRET_KEY,
    MERCHANT_DOMAIN_NAME: process.env.MERCHANT_DOMAIN_NAME,
    EMAIL_HOST: process.env.EMAIL_HOST,
    EMAIL_USER: process.env.EMAIL_USER,
    EMAIL_PASS: process.env.EMAIL_PASS
};

const missingVars = Object.entries(requiredEnvVars)
    .filter(([key, value]) => !value)
    .map(([key]) => key);

if (missingVars.length > 0) {
    console.error('‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è:', missingVars.join(', '));
    console.error('üìù –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª .env');
    process.exit(1);
}

const MERCHANT_ACCOUNT = process.env.MERCHANT_ACCOUNT;
const MERCHANT_SECRET_KEY = process.env.MERCHANT_SECRET_KEY;
const MERCHANT_DOMAIN_NAME = process.env.MERCHANT_DOMAIN_NAME;

// Email configuration
const EMAIL_HOST = process.env.EMAIL_HOST;
const EMAIL_PORT = process.env.EMAIL_PORT || 587;
const EMAIL_USER = process.env.EMAIL_USER;
const EMAIL_PASS = process.env.EMAIL_PASS;
const EMAIL_FROM = process.env.EMAIL_FROM || process.env.EMAIL_USER;

// –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
const metrics = {
    totalOrders: 0,
    successfulPayments: 0,
    failedPayments: 0,
    emailsSent: 0,
    emailsFailed: 0,
    startTime: Date.now()
};

const paymentStatuses = {};
const customerData = {}; // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –¥–ª—è email
const transporter = nodemailer.createTransport({
    host: EMAIL_HOST,
    port: EMAIL_PORT,
    secure: EMAIL_PORT === 465,
    auth: {
        user: EMAIL_USER,
        pass: EMAIL_PASS
    },
    pool: true, // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—É–ª –∑'—î–¥–Ω–∞–Ω—å
    maxConnections: 5,
    maxMessages: 100
});

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ email –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
transporter.verify((error, success) => {
    if (error) {
        console.error('‚ùå Email –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ:', error.message);
        console.error('üìß –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ EMAIL_HOST, EMAIL_USER, EMAIL_PASS –≤ .env —Ñ–∞–π–ª—ñ');
    } else {
        console.log('‚úÖ Email —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏');
    }
});

// Rate limiting –¥–ª—è –∑–∞—Ö–∏—Å—Ç—É –≤—ñ–¥ —Å–ø–∞–º—É
const paymentLimiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 —Ö–≤–∏–ª–∏–Ω
    max: 5, // –º–∞–∫—Å–∏–º—É–º 5 —Å–ø—Ä–æ–± –Ω–∞ IP
    message: '–ó–∞–±–∞–≥–∞—Ç–æ —Å–ø—Ä–æ–± –æ–ø–ª–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 15 —Ö–≤–∏–ª–∏–Ω.',
    standardHeaders: true,
    legacyHeaders: false
});

// –§—É–Ω–∫—Ü—ñ—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó email
function isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö
function scheduleDataCleanup(orderId) {
    setTimeout(() => {
        if (customerData[orderId]) {
            console.log(`üßπ –û—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${orderId}`);
            delete customerData[orderId];
        }
        if (paymentStatuses[orderId]) {
            delete paymentStatuses[orderId];
        }
    }, 2 * 60 * 60 * 1000); // –û—á–∏—â–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 2 –≥–æ–¥–∏–Ω–∏
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email –∫–ª—ñ—î–Ω—Ç—É
async function sendPaymentConfirmationEmail(email, name, courseName, orderId) {
    try {
        const telegramBotUrl = process.env.TELEGRAM_BOT_URL || 'https://t.me/Tinas_cursuribot';
        
        const mailOptions = {
            from: EMAIL_FROM,
            to: email,
            subject: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ –∫—É—Ä—Å—É - TinaSchool',
            html: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9f9f9;">
                    <div style="background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
                        <h2 style="color: #2c3e50; text-align: center; margin-bottom: 30px;">üéâ –î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</h2>
                        
                        <p style="font-size: 16px; line-height: 1.6;">–ü—Ä–∏–≤—ñ—Ç, <strong>${name}</strong>!</p>
                        
                        <p style="font-size: 16px; line-height: 1.6;">–ú–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ —É—Å–ø—ñ—à–Ω—É –æ–ø–ª–∞—Ç—É –∫—É—Ä—Å—É <strong>${courseName}</strong>.</p>
                        
                        <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #007bff;">
                            <h3 style="color: #495057; margin-top: 0;">üìã –î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</h3>
                            <p><strong>–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</strong> ${orderId}</p>
                            <p><strong>–ö—É—Ä—Å:</strong> ${courseName}</p>
                            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span style="color: #28a745;">–û–ø–ª–∞—á–µ–Ω–æ ‚úÖ</span></p>
                            <p><strong>–î–∞—Ç–∞:</strong> ${new Date().toLocaleDateString('uk-UA')}</p>
                        </div>
                        
                        <div style="background-color: #e8f5e8; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #28a745;">
                            <h3 style="color: #155724; margin-top: 0;">üéØ –í–∞—à –∫—É—Ä—Å –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!</h3>
                            <p style="color: #155724; margin-bottom: 15px;">
                                –î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–æ –∫—É—Ä—Å—É —Ç–∞ –≤—Å—ñ—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤, –ø–µ—Ä–µ–π–¥—ñ—Ç—å –≤ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç:
                            </p>
                            <div style="text-align: center; margin: 20px 0;">
                                <a href="${telegramBotUrl}" style="background-color: #0088cc; color: white; padding: 15px 30px; text-decoration: none; border-radius: 25px; display: inline-block; font-weight: bold; font-size: 16px; transition: background-color 0.3s;">
                                    ü§ñ –ü–µ—Ä–µ–π—Ç–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç
                                </a>
                            </div>
                            <p style="color: #155724; font-size: 14px; text-align: center; background-color: #d4edda; padding: 10px; border-radius: 5px;">
                                üí° –í –±–æ—Ç—ñ –≤–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: <strong>${orderId}</strong>
                            </p>
                        </div>
                        
                        <div style="margin: 30px 0;">
                            <h3 style="color: #495057;">üöÄ –©–æ –¥–∞–ª—ñ?</h3>
                            <ol style="padding-left: 20px; line-height: 1.8;">
                                <li>–ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –≤–∏—â–µ</li>
                                <li>–í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: <strong>${orderId}</strong></li>
                                <li>–û—Ç—Ä–∏–º–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ –≤—Å—ñ—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ –∫—É—Ä—Å—É</li>
                                <li>–ü–æ—á–∏–Ω–∞–π—Ç–µ –Ω–∞–≤—á–∞–Ω–Ω—è –≤–∂–µ —Å—å–æ–≥–æ–¥–Ω—ñ!</li>
                            </ol>
                        </div>
                        

                        <hr style="border: none; border-top: 1px solid #dee2e6; margin: 30px 0;">
                        
                        <div style="text-align: center; color: #6c757d; font-size: 14px;">
                            <p><strong>TinaSchool</strong></p>
                            <p>
                                üìß <a href="tinoczkakomar@gmail.com" style="color: #007bff;">contact@langspace.com</a><br>
                            </p>
                            <p style="margin-top: 20px;">¬© 2025 TinaSchool. –í—Å—ñ –ø—Ä–∞–≤–∞ –∑–∞—Ö–∏—â–µ–Ω–æ.</p>
                        </div>
                    </div>
                </div>
            `
        };

        await transporter.sendMail(mailOptions);
        metrics.emailsSent++;
        console.log(`‚úÖ Email –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${email}`);
    } catch (error) {
        metrics.emailsFailed++;
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email –∫–ª—ñ—î–Ω—Ç—É:', error.message);
        // –ù–µ –±–ª–æ–∫—É—î–º–æ –ø—Ä–æ—Ü–µ—Å –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ email
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
async function sendAdminNotification(email, name, courseName, orderId, price) {
    try {
        const mailOptions = {
            from: EMAIL_FROM,
            to: EMAIL_FROM, // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –≤–ª–∞—Å–Ω—É –ø–æ—à—Ç—É
            subject: `üí∞ –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è - ${orderId}`,
            html: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
                    <div style="background-color: #e8f5e8; padding: 20px; border-radius: 8px; border-left: 4px solid #28a745;">
                        <h2 style="color: #28a745; margin-top: 0;">üí∞ –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–ø–ª–∞—á–µ–Ω–æ!</h2>
                        
                        <div style="background-color: white; padding: 20px; border-radius: 8px; margin: 20px 0;">
                            <h3 style="margin-top: 0; color: #495057;">üìã –î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</h3>
                            <table style="width: 100%; border-collapse: collapse;">
                                <tr><td style="padding: 8px; border-bottom: 1px solid #dee2e6;"><strong>–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</strong></td><td style="padding: 8px; border-bottom: 1px solid #dee2e6;">${orderId}</td></tr>
                                <tr><td style="padding: 8px; border-bottom: 1px solid #dee2e6;"><strong>–ö—É—Ä—Å:</strong></td><td style="padding: 8px; border-bottom: 1px solid #dee2e6;">${courseName}</td></tr>
                                <tr><td style="padding: 8px; border-bottom: 1px solid #dee2e6;"><strong>–°—É–º–∞:</strong></td><td style="padding: 8px; border-bottom: 1px solid #dee2e6;"><strong>${price} –≥—Ä–Ω</strong></td></tr>
                                <tr><td style="padding: 8px; border-bottom: 1px solid #dee2e6;"><strong>–Ü–º'—è –∫–ª—ñ—î–Ω—Ç–∞:</strong></td><td style="padding: 8px; border-bottom: 1px solid #dee2e6;">${name}</td></tr>
                                <tr><td style="padding: 8px; border-bottom: 1px solid #dee2e6;"><strong>Email –∫–ª—ñ—î–Ω—Ç–∞:</strong></td><td style="padding: 8px; border-bottom: 1px solid #dee2e6;">${email}</td></tr>
                                <tr><td style="padding: 8px;"><strong>–î–∞—Ç–∞:</strong></td><td style="padding: 8px;">${new Date().toLocaleString('uk-UA')}</td></tr>
                            </table>
                        </div>
                        
                        <div style="background-color: #fff3cd; padding: 15px; border-radius: 5px; border-left: 4px solid #ffc107;">
                            <strong>üìù –î—ñ—ó:</strong>
                            <ul>
                                <li>–ù–∞–¥–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –∫—É—Ä—Å—É –∫–ª—ñ—î–Ω—Ç—É</li>
                                <li>–î–æ–¥–∞—Ç–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç</li>
                                <li>–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –∫—É—Ä—Å—É</li>
                            </ul>
                        </div>
                    </div>
                </div>
            `
        };

        await transporter.sendMail(mailOptions);
        console.log('‚úÖ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error.message);
    }
}

// Middleware
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// –ú–∞—Ä—à—Ä—É—Ç–∏
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

app.all('/public/status.html', (req, res) => {
    res.sendFile(path.resolve(__dirname, 'public/status.html'));
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è email
app.get('/test-email', async (req, res) => {
    try {
        await transporter.sendMail({
            from: EMAIL_FROM,
            to: EMAIL_USER,
            subject: '–¢–µ—Å—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å email - TinaSchool',
            html: `
                <div style="font-family: Arial, sans-serif; padding: 20px;">
                    <h2 style="color: #28a745;">‚úÖ Email –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—é—Ç—å!</h2>
                    <p>–Ø–∫—â–æ –≤–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ —Ü–µ–π –ª–∏—Å—Ç, –≤–∞—à—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è email –ø—Ä–∞–≤–∏–ª—å–Ω—ñ.</p>
                    <p><strong>–ß–∞—Å —Ç–µ—Å—Ç—É:</strong> ${new Date().toLocaleString('uk-UA')}</p>
                </div>
            `
        });
        res.json({
            success: true,
            message: '–¢–µ—Å—Ç–æ–≤–∏–π email –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!',
            timestamp: new Date().toISOString()
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            message: `–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email: ${error.message}`,
            timestamp: new Date().toISOString()
        });
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
app.get('/stats', (req, res) => {
    const uptime = Date.now() - metrics.startTime;
    res.json({
        ...metrics,
        uptime: Math.floor(uptime / 1000) + ' —Å–µ–∫—É–Ω–¥',
        timestamp: new Date().toISOString()
    });
});

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é
app.post('/create-payment', paymentLimiter, async (req, res) => {
    try {
        const { name, email, course } = req.body;
        
        // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
        if (!name || !email || !course) {
            return res.status(400).json({ error: '–í—Å—ñ –ø–æ–ª—è –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ' });
        }
        
        if (!isValidEmail(email)) {
            return res.status(400).json({ error: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π email –∞–¥—Ä–µ—Å' });
        }
        
        if (name.length < 2 || name.length > 50) {
            return res.status(400).json({ error: '–Ü–º\'—è –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 2 –¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤' });
        }

        const courses = {
            solo: {
                name: '–ö—É—Ä—Å: –°–∞–º–æ—Å—Ç—ñ–π–Ω–∏–π',
                price: '1199'
            },
            support: {
                name: '–ö—É—Ä—Å –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é',
                price: '1799'
            }
        };

        const selected = courses[course];
        if (!selected) {
            return res.status(400).json({ error: '–ö—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
        }

        const courseData = {
            name: selected.name,
            price: selected.price,
            currency: 'UAH',
            orderId: `COURSE_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`
        };

        const orderDate = Math.floor(Date.now() / 1000).toString();

        const stringToSign = [
            MERCHANT_ACCOUNT,
            MERCHANT_DOMAIN_NAME,
            courseData.orderId,
            orderDate,
            courseData.price,
            courseData.currency,
            courseData.name,
            '1',
            courseData.price
        ].join(';');

        const merchantSignature = crypto
            .createHmac('md5', MERCHANT_SECRET_KEY)
            .update(stringToSign)
            .digest('hex');

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫
        metrics.totalOrders++;
        paymentStatuses[courseData.orderId] = { 
            status: 'pending',
            createdAt: new Date().toISOString()
        };
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email –ø—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏
        customerData[courseData.orderId] = {
            name: name.trim(),
            email: email.toLowerCase().trim(),
            courseName: courseData.name,
            price: courseData.price,
            createdAt: new Date().toISOString()
        };

        // –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –æ—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        scheduleDataCleanup(courseData.orderId);

        console.log(`üí∞ –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${courseData.orderId}, –∫—É—Ä—Å: ${course}, email: ${email}`);

        const baseUrl = `${req.protocol}://${req.get('host')}`;

        res.render('redirect', {
            merchantAccount: MERCHANT_ACCOUNT,
            merchantDomainName: MERCHANT_DOMAIN_NAME,
            orderId: courseData.orderId,
            orderDate,
            amount: courseData.price,
            currency: courseData.currency,
            courseName: courseData.name,
            clientName: name,
            clientEmail: email,
            serviceUrl: `${baseUrl}/server-callback`,
            returnUrl: `${baseUrl}/public/status.html?order_id=${courseData.orderId}`,
            failUrl: `${baseUrl}/public/status.html?order_id=${courseData.orderId}`,
            signature: merchantSignature
        });

    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –û–±—Ä–æ–±–∫–∞ callback –≤—ñ–¥ –ø–ª–∞—Ç—ñ–∂–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
app.post('/server-callback', async (req, res) => {
    try {
        const {
            orderReference,
            status,
            time,
            merchantSignature: wfpSignature
        } = req.body;

        console.log(`üìû Callback –æ—Ç—Ä–∏–º–∞–Ω–æ: ${orderReference}, —Å—Ç–∞—Ç—É—Å: ${status}`);

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å—É
        const stringToSign = [orderReference, status, time].join(';');
        const expectedSignature = crypto
            .createHmac('md5', MERCHANT_SECRET_KEY)
            .update(stringToSign)
            .digest('hex');

        if (expectedSignature !== wfpSignature) {
            console.error('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø—ñ–¥–ø–∏—Å callback:', { expected: expectedSignature, received: wfpSignature });
            return res.status(400).send('Invalid signature');
        }

        if (status === 'accept') {
            // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –æ–ø–ª–∞—Ç–∏
            paymentStatuses[orderReference] = { 
                status: 'paid',
                paidAt: new Date().toISOString()
            };
            metrics.successfulPayments++;
            
            console.log(`‚úÖ –û–ø–ª–∞—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞: ${orderReference}`);
            
            // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ email –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –æ–ø–ª–∞—Ç–∏
            const customer = customerData[orderReference];
            if (customer) {
                console.log(`üìß –í—ñ–¥–ø—Ä–∞–≤–∫–∞ email –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${orderReference}`);
                
                // Email –∫–ª—ñ—î–Ω—Ç—É (–Ω–µ –±–ª–æ–∫—É—î–º–æ –ø—Ä–æ—Ü–µ—Å –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ)
                sendPaymentConfirmationEmail(
                    customer.email,
                    customer.name,
                    customer.courseName,
                    orderReference
                ).catch(error => {
                    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email –∫–ª—ñ—î–Ω—Ç—É:', error.message);
                });
                
                // Email –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
                sendAdminNotification(
                    customer.email,
                    customer.name,
                    customer.courseName,
                    orderReference,
                    customer.price
                ).catch(error => {
                    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É:', error.message);
                });
            } else {
                console.error('‚ùå –î–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', orderReference);
            }
        } else if (status === 'decline') {
            metrics.failedPayments++;
            console.log(`‚ùå –û–ø–ª–∞—Ç–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞: ${orderReference}`);
        }

        // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        const responseTime = Math.floor(Date.now() / 1000);
        const responseString = [orderReference, 'accept', responseTime].join(';');
        const responseSignature = crypto
            .createHmac('md5', MERCHANT_SECRET_KEY)
            .update(responseString)
            .digest('hex');

        res.json({
            orderReference,
            status: 'accept',
            time: responseTime,
            signature: responseSignature
        });

    } catch (err) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ callback:', err);
        res.status(500).send('Server error');
    }
});

// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('üîÑ –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...');
    transporter.close();
    process.exit(0);
});

process.on('SIGINT', () => {
    console.log('üîÑ –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...');
    transporter.close();
    process.exit(0);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:${PORT}`);
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ http://localhost:${PORT}/stats`);
    console.log(`üß™ –¢–µ—Å—Ç email: http://localhost:${PORT}/test-email`);
    console.log(`üìß Email: ${EMAIL_USER} ‚Üí ${EMAIL_HOST}:${EMAIL_PORT}`);
});